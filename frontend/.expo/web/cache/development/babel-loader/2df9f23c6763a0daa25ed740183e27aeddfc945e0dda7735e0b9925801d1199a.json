{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport isArrayEqual from \"./isArrayEqual\";\nexport default function useOnGetState(_ref) {\n  var getState = _ref.getState,\n    getStateListeners = _ref.getStateListeners;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addKeyedListener = _React$useContext.addKeyedListener;\n  var route = React.useContext(NavigationRouteContext);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var _getStateListeners$ro;\n      var childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n      if (route.state === childState) {\n        return route;\n      }\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: childState\n      });\n    });\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n    return _objectSpread(_objectSpread({}, state), {}, {\n      routes: routes\n    });\n  }, [getState, getStateListeners]);\n  React.useEffect(function () {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\core\\lib\\module\\useOnGetState.tsx"],"names":["React","NavigationBuilderContext","NavigationRouteContext","isArrayEqual","useOnGetState","getState","getStateListeners","addKeyedListener","useContext","route","key","getRehydratedState","useCallback","state","routes","map","childState","useEffect"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAGA,OAAOC,sBAAP;AACA,OAAOC,YAAP;AAOA,eAAe,SAASC,aAAT,CAAA,IAAA,EAGH;EAAA,IAFVC,QADoC,GAAA,IAAA,CACpCA,QADoC;IAEpCC,iBAAAA,GAAAA,IAAAA,CAAAA,iBAAAA;EAEA,IAAA,iBAAA,GAA6BN,KAAK,CAACQ,UAANR,CAAiBC,wBAAjBD,CAA7B;IAAQO,gBAAAA,GAAAA,iBAAAA,CAAAA,gBAAAA;EACR,IAAME,KAAK,GAAGT,KAAK,CAACQ,UAANR,CAAiBE,sBAAjBF,CAAd;EACA,IAAMU,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAACC,GAAT,GAAe,MAAhC;EAEA,IAAMC,kBAAkB,GAAG,KAAK,CAACC,WAAN,CAAkB,YAAM;IACjD,IAAMC,KAAK,GAAGR,QAAQ,CAAA,CAD2B;IAIjD,IAAMS,MAAM,GAAG,KAAK,CAACA,MAAN,CAAaC,GAAb,CAAkBN,UAAAA,KAAD,EAAW;MAAA,IAAA,qBAAA;MACzC,IAAMO,UAAU,GAAA,CAAA,qBAAA,GAAGV,iBAAiB,CAACG,KAAK,CAACC,GAAP,CAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGJ,qBAAAA,CAAAA,IAAAA,CAAAA,iBAAiB,CAApC;MAEA,IAAIG,KAAK,CAACI,KAANJ,KAAgBO,UAApB,EAAgC;QAC9B,OAAOP,KAAP;MACD;MAED,OAAA,aAAA,CAAA,aAAA,KAAYA,KAAL;QAAYI,KAAK,EAAEG;MAAAA;IAC3B,CARc,CAAf;IAUA,IAAIb,YAAY,CAACU,KAAK,CAACC,MAAP,EAAeA,MAAf,CAAhB,EAAwC;MACtC,OAAOD,KAAP;IACD;IAED,OAAA,aAAA,CAAA,aAAA,KAAYA,KAAL;MAAYC,MAAAA,EAAAA;IAAAA;EACpB,CAnB0B,EAmBxB,CAACT,QAAD,EAAWC,iBAAX,CAnBwB,CAA3B;EAqBAN,KAAK,CAACiB,SAANjB,CAAgB,YAAM;IACpB,OAAOO,gBAAP,KAAA,IAAA,IAAOA,gBAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,gBAAgB,CAAG,UAAH,EAAeG,GAAf,EAAoBC,kBAApB,CAAvB;EACD,CAFDX,EAEG,CAACO,gBAAD,EAAmBI,kBAAnB,EAAuCD,GAAvC,CAFHV,CAAAA;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}