{"ast":null,"code":"import color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DarkTheme from \"./DarkTheme\";\nvar isAnimatedValue = function isAnimatedValue(it) {\n  return it instanceof Animated.Value;\n};\nexport default function overlay(elevation) {\n  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DarkTheme.colors.surface;\n  if (isAnimatedValue(elevation)) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (elevation) {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor) {\n  var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var overlayTransparency;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\nvar elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\styles\\overlay.tsx"],"names":["color","DarkTheme","isAnimatedValue","it","Animated","Value","overlay","elevation","surfaceColor","colors","surface","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA,OAAA,QAAA;AAEA,OAAOC,SAAP;AAEA,IAAMC,eAAe,GACnBC,SADID,eAAe,CACnBC,EADsB;EAAA,OAEGA,EAAE,YAAYC,QAAQ,CAACC,KAFlD;AAAA;AAIA,eAAe,SAASC,OAAT,CACbC,SADa,EAG+C;EAAA,IAD5DC,YAC4D,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADrCP,SAAS,CAACQ,MAAVR,CAAiBS,OACoB;EAC5D,IAAIR,eAAe,CAACK,SAAD,CAAnB,EAAgC;IAC9B,IAAMI,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CADW;IAI9B,OAAO,SAAS,CAACC,WAAV,CAAsB;MAC3BD,UAD2B,EAC3BA,UAD2B;MAE3BE,WAAW,EAAE,UAAU,CAACC,GAAX,CAAgBP,UAAAA,SAAD,EAAe;QACzC,OAAOQ,cAAc,CAACP,YAAD,EAAeD,SAAf,CAArB;MACD,CAFY;IAFc,CAAtB,CAAP;EAL0D;EAc5D,OAAOQ,cAAc,CAACP,YAAD,EAAeD,SAAf,CAArB;AACD;AAED,SAASQ,cAAT,CAAwBP,YAAxB,EAAqE;EAAA,IAAvBD,SAAuB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;EACnE,IAAIS,mBAAJ;EACA,IAAIT,SAAS,IAAI,CAAbA,IAAkBA,SAAS,IAAI,EAAnC,EAAuC;IACrCS,mBAAmB,GAAGC,4BAA4B,CAACV,SAAD,CAAlDS;EACD,CAFD,MAEO,IAAIT,SAAS,GAAG,EAAhB,EAAoB;IACzBS,mBAAmB,GAAGC,4BAA4B,CAAC,EAAD,CAAlDD;EACD,CAFM,MAEA;IACLA,mBAAmB,GAAGC,4BAA4B,CAAC,CAAD,CAAlDD;EACD;EACD,OAAOhB,KAAK,CAACQ,YAAD,CAALR,CACJkB,GADIlB,CACAA,KAAK,CAAC,OAAD,CADLA,EACgBgB,mBAAmB,GAAG,IADtChB,CAAAA,CAEJmB,GAFInB,CAAAA,CAAP;AAGD;AAED,IAAMiB,4BAAoD,GAAG;EAC3D,CAAA,EAAG,CADwD;EAE3D,CAAA,EAAG,CAFwD;EAG3D,CAAA,EAAG,CAHwD;EAI3D,CAAA,EAAG,CAJwD;EAK3D,CAAA,EAAG,EALwD;EAM3D,CAAA,EAAG,EANwD;EAO3D,CAAA,EAAG,IAPwD;EAQ3D,CAAA,EAAG,EARwD;EAS3D,CAAA,EAAG,IATwD;EAU3D,EAAA,EAAI,EAVuD;EAW3D,EAAA,EAAI,IAXuD;EAY3D,EAAA,EAAI,EAZuD;EAa3D,EAAA,EAAI,KAbuD;EAc3D,EAAA,EAAI,IAduD;EAe3D,EAAA,EAAI,KAfuD;EAgB3D,EAAA,EAAI,EAhBuD;EAiB3D,EAAA,EAAI,KAjBuD;EAkB3D,EAAA,EAAI,KAlBuD;EAmB3D,EAAA,EAAI,KAnBuD;EAoB3D,EAAA,EAAI,KApBuD;EAqB3D,EAAA,EAAI,IArBuD;EAsB3D,EAAA,EAAI,KAtBuD;EAuB3D,EAAA,EAAI,KAvBuD;EAwB3D,EAAA,EAAI;AAxBuD,CAA7D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nconst isAnimatedValue = (\n  it: number | Animated.AnimatedInterpolation\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = DarkTheme.colors.surface\n): T extends number ? string : Animated.AnimatedInterpolation {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}