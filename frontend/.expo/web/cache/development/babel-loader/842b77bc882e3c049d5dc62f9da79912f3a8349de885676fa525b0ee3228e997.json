{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    _underlineColor = _ref.underlineColor,\n    customOutlineColor = _ref.outlineColor,\n    activeOutlineColor = _ref.activeOutlineColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n    fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _ref4 = StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref4.fontSize,\n    fontWeight = _ref4.fontWeight,\n    fontVariant = _ref4.fontVariant,\n    lineHeight = _ref4.lineHeight,\n    height = _ref4.height,\n    _ref4$backgroundColor = _ref4.backgroundColor,\n    backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n    textAlign = _ref4.textAlign,\n    viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n  if (disabled) {\n    var isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n      type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = _defineProperty(_defineProperty({}, AdornmentSide.Left, leftAffixTopPosition), AdornmentSide.Right, rightAffixTopPosition);\n  var onAffixChange = _defineProperty(_defineProperty({}, AdornmentSide.Left, onLeftAffixLayoutChange), AdornmentSide.Right, onRightAffixLayoutChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: _defineProperty(_defineProperty({}, AdornmentType.Icon, iconTopPosition), AdornmentType.Affix, affixTopPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-outlined'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    activeColor = _ref3.activeColor,\n    outlineColor = _ref3.outlineColor,\n    focused = _ref3.focused,\n    backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/react-native-paper/lib/module/components/TextInput/TextInputOutlined.tsx"],"names":["React","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","label","error","selectionColor","underlineColor","_underlineColor","outlineColor","customOutlineColor","activeOutlineColor","dense","style","theme","render","props","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","fontVariant","lineHeight","height","backgroundColor","background","textAlign","viewStyle","StyleSheet","flatten","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","labelContainer","paddingTop","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","Outline","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                fontVariant,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}