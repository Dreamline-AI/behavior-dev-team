{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"theme\", \"alpha\", \"family\", \"style\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport color from 'color';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"./Text\";\nimport { withTheme } from \"../../core/theming\";\nvar StyledText = function StyledText(_ref) {\n  var theme = _ref.theme,\n    alpha = _ref.alpha,\n    family = _ref.family,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  var font = theme.fonts[family];\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n  return React.createElement(Text, _extends({}, rest, {\n    style: [styles.text, _objectSpread(_objectSpread({\n      color: textColor\n    }, font), {}, {\n      writingDirection: writingDirection\n    }), style]\n  }));\n};\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(StyledText);","map":{"version":3,"sources":["D:\\Community Dreams frontend\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Typography\\StyledText.tsx"],"names":["color","React","Text","withTheme","StyledText","theme","alpha","family","style","rest","textColor","colors","text","rgb","string","font","fonts","writingDirection","I18nManager","isRTL","styles","create","textAlign"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAAA,OAAA,WAAA;AAAA,OAAA,UAAA;AAGA,OAAOC,IAAP;AACA,SAASC,SAAT;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAG,IAAA,EAAqD;EAApD,IAAEC,KAAF,GAAoD,IAAA,CAAlDA,KAAF;IAASC,KAAT,GAAoD,IAAA,CAA3CA,KAAT;IAAgBC,MAAhB,GAAoD,IAAA,CAApCA,MAAhB;IAAwBC,KAAxB,GAAoD,IAAA,CAA5BA,KAAxB;IAAkCC,IAAAA,GAAAA,wBAAAA,CAAkB,IAAA,EAAA,SAAA;EACtE,IAAMC,SAAS,GAAGV,KAAK,CAACK,KAAK,CAACM,MAANN,CAAaO,IAAd,CAALZ,CAAyBM,KAAzBN,CAA+BM,KAA/BN,CAAAA,CAAsCa,GAAtCb,CAAAA,CAAAA,CAA4Cc,MAA5Cd,CAAAA,CAAlB;EACA,IAAMe,IAAI,GAAGV,KAAK,CAACW,KAANX,CAAYE,MAAZF,CAAb;EACA,IAAMY,gBAAgB,GAAGC,WAAW,CAACC,KAAZD,GAAoB,KAApBA,GAA4B,KAArD;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMT,IADN,EAAA;IAEE,KAAK,EAAE,CACLW,MAAM,CAACR,IADF,EAAA,aAAA,CAAA,aAAA;MAEHZ,KAAK,EAAEU;IAAT,GAAuBK,IAAvB;MAA6BE,gBAAAA,EAAAA;IAAAA,IAC7BT,KAHK;EAFT,CAAA,CAAA,CADF;AAUD,CAfD;AAiBA,IAAMY,MAAM,GAAG,UAAU,CAACC,MAAX,CAAkB;EAC/BT,IAAI,EAAE;IACJU,SAAS,EAAE;EADP;AADyB,CAAlB,CAAf;AAMA,eAAenB,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}