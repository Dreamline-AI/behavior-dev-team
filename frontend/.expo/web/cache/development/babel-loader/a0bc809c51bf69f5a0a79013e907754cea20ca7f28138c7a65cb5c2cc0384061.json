{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n    _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n    legacy = _checkLegacyPathConfi2[0],\n    compatOptions = _checkLegacyPathConfi2[1];\n  var configs = compatOptions ? createNormalizedConfigs(legacy, compatOptions.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n  var _loop = function _loop() {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      var nestedRouteNames = [];\n      var hasNext = true;\n      var _loop2 = function _loop2() {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n          var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n            return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n          }));\n          if (pattern) {\n            _extends(allParams, currentParams);\n          }\n          if (focusedRoute === route) {\n            focusedParams = _objectSpread({}, currentParams);\n            (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).forEach(function (p) {\n              var name = getParamName(p);\n              if (focusedParams) {\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          hasNext = false;\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            hasNext = false;\n          }\n        }\n      };\n      while (route.name in currentOptions && hasNext) {\n        _loop2();\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        path += pattern.split('/').map(function (p) {\n          var name = getParamName(p);\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\");\n            }\n            return route.name;\n          }\n          if (p.startsWith(':')) {\n            var value = allParams[name];\n            if (value === undefined && p.endsWith('?')) {\n              return '';\n            }\n            return encodeURIComponent(value);\n          }\n          return encodeURIComponent(p);\n        }).join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            delete focusedParams[param];\n          }\n        }\n        var query = queryString.stringify(focusedParams);\n        if (query) {\n          path += \"?\".concat(query);\n        }\n      }\n      current = route.state;\n    },\n    _currentOptions$route,\n    _pattern;\n  while (current) {\n    _loop();\n  }\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\nvar fromEntries = function fromEntries(entries) {\n  return entries.reduce(function (acc, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    if (acc.hasOwnProperty(k)) {\n      throw new Error(\"A value for key '\".concat(k, \"' already exists in the object.\"));\n    }\n    acc[k] = v;\n    return acc;\n  }, {});\n};\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\nvar joinPaths = function joinPaths() {\n  var _ref5;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref5 = []).concat.apply(_ref5, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar createConfigItem = function createConfigItem(legacy, config, parentPattern) {\n  var _pattern2;\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern: _pattern3\n    };\n  }\n  var pattern;\n  if (legacy) {\n    pattern = config.exact !== true && parentPattern && config.path ? joinPaths(parentPattern, config.path) : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  }\n  var screens = config.screens ? createNormalizedConfigs(legacy, config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, options, pattern) {\n  return fromEntries(Object.entries(options).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      name = _ref7[0],\n      c = _ref7[1];\n    var result = createConfigItem(legacy, c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"names":["queryString","checkLegacyPathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","_checkLegacyPathConfi","_checkLegacyPathConfi2","_slicedToArray","legacy","compatOptions","configs","createNormalizedConfigs","screens","path","current","allParams","_loop","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","_loop2","name","push","params","stringify","_currentOptions$route","currentParams","fromEntries","Object","entries","map","_ref","_ref2","key","value","String","_extends","_objectSpread","_pattern","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","concat","replace","reduce","acc","_ref3","_ref4","k","v","hasOwnProperty","joinPaths","_ref5","_len","arguments","paths","Array","_key","apply","_toConsumableArray","Boolean","createConfigItem","config","parentPattern","_pattern2","exact","_ref6","_ref7","c","result"],"sources":["C:\\voluteer project\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\core\\lib\\module\\getPathFromState.tsx"],"sourcesContent":["import * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfig, PathConfigMap } from './types';\n\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state: State,\n  options?: Options\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = compatOptions\n    ? createNormalizedConfigs(legacy, compatOptions.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\n// Object.fromEntries is not available in older iOS versions\nconst fromEntries = <K extends string, V>(entries: (readonly [K, V])[]) =>\n  entries.reduce((acc, [k, v]) => {\n    if (acc.hasOwnProperty(k)) {\n      throw new Error(`A value for key '${k}' already exists in the object.`);\n    }\n\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  legacy: boolean,\n  config: PathConfig | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (legacy) {\n    pattern =\n      config.exact !== true && parentPattern && config.path\n        ? joinPaths(parentPattern, config.path)\n        : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\n        \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n      );\n    }\n\n    pattern =\n      config.exact !== true\n        ? joinPaths(parentPattern || '', config.path || '')\n        : config.path || '';\n  }\n\n  const screens = config.screens\n    ? createNormalizedConfigs(legacy, config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  options: PathConfigMap,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(legacy, c, pattern);\n\n      return [name, result];\n    })\n  );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}