{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nvar Text = function Text(_ref, ref) {\n  var style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      setNativeProps: function setNativeProps(args) {\n        var _root$current;\n        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.setNativeProps(args);\n      }\n    };\n  });\n  return React.createElement(NativeText, _extends({}, rest, {\n    ref: root,\n    style: [_objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n      color: theme.colors.text\n    }), styles.text, style]\n  }));\n};\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(React.forwardRef(Text));","map":{"version":3,"sources":["D:\\Community Dreams frontend\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Typography\\Text.tsx"],"names":["React","withTheme","Text","style","theme","rest","ref","root","useRef","useImperativeHandle","setNativeProps","args","current","fonts","regular","color","colors","text","styles","create","textAlign","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAA,UAAA;AAAA,OAAA,UAAA;AAOA,SAASC,SAAT;AAiBA,IAAMC,IAA6C,GAAG,SAAhDA,IAA6C,CAAG,IAAA,EAEpDI,GAFoD,EAGjD;EAFH,IAAEH,KAAF,GAEG,IAAA,CAFDA,KAAF;IAASC,KAAT,GAEG,IAAA,CAFMA,KAAT;IAAmBC,IAAAA,GAAAA,wBAAAA,CAEhB,IAAA,EAAA,SAAA;EACH,IAAME,IAAI,GAAGP,KAAK,CAACQ,MAANR,CAAgC,IAAhCA,CAAb;EAEAA,KAAK,CAACS,mBAANT,CAA0BM,GAA1BN,EAA+B;IAAA,OAAO;MACpCU,cAAc,EAAGC,SAAAA,eAAAA,IAAD,EAAA;QAAA,IAAA,aAAA;QAAA,OAAA,CAAA,aAAA,GAAkBJ,IAAI,CAACK,OAAvB,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAkBL,aAAAA,CAAcG,cAAdH,CAA6BI,IAA7BJ,CAAlB;MAAA;IADoB,CAAP;EAAA,CAA/BP,CAAAA;EAIA,OACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMK,IADN,EAAA;IAEE,GAAG,EAAEE,IAFP;IAGE,KAAK,EAAE,CAAA,aAAA,CAAA,aAAA,KAEAH,KAAK,CAACS,KAANT,CAAYU,OADjB;MAEEC,KAAK,EAAEX,KAAK,CAACY,MAANZ,CAAaa;IAAAA,IAEtBC,MAAM,CAACD,IALF,EAMLd,KANK;EAHT,CAAA,CAAA,CADF;AAcD,CAxBD;AA0BA,IAAMe,MAAM,GAAG,UAAU,CAACC,MAAX,CAAkB;EAC/BF,IAAI,EAAE;IACJG,SAAS,EAAE;EADP;AADyB,CAAlB,CAAf;AAMA,eAAenB,SAAS,CAACD,KAAK,CAACqB,UAANrB,CAAiBE,IAAjBF,CAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  Text as NativeText,\n  TextStyle,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = React.ComponentProps<typeof NativeText> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n// @component-group Typography\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nconst Text: React.RefForwardingComponent<{}, Props> = (\n  { style, theme, ...rest }: Props,\n  ref\n) => {\n  const root = React.useRef<NativeText | null>(null);\n\n  React.useImperativeHandle(ref, () => ({\n    setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n  }));\n\n  return (\n    <NativeText\n      {...rest}\n      ref={root}\n      style={[\n        {\n          ...theme.fonts.regular,\n          color: theme.colors.text,\n        },\n        styles.text,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(React.forwardRef(Text));\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}