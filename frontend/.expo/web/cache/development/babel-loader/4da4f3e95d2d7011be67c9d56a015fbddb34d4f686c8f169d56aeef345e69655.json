{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    status = _ref.status,\n    value = _ref.value,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n        });\n      },\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\nvar RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };","map":{"version":3,"names":["React","StyleSheet","View","color","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","RadioButtonIOS","_ref","disabled","onPress","theme","status","value","testID","rest","_objectWithoutProperties","_excluded","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","createElement","Consumer","context","checked","contextValue","_extends","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","opacity","allowFontScaling","name","size","direction","displayName","create","borderRadius","padding","RadioButtonIOSWithTheme"],"sources":["C:\\voluteer project\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\RadioButton\\RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}