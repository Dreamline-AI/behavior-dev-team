{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\", \"testID\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nvar BORDER_WIDTH = 2;\nvar RadioButtonAndroid = function RadioButtonAndroid(_ref) {\n  var disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    theme = _ref.theme,\n    value = _ref.value,\n    status = _ref.status,\n    testID = _ref.testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(BORDER_WIDTH)),\n    borderAnim = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(1)),\n    radioAnim = _React$useRef2.current;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  var checkedColor = rest.color || theme.colors.accent;\n  var uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var rippleColor, radioColor;\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value\n        });\n      },\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: radioColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: radioColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid);\nvar RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","_ref","disabled","onPress","theme","value","status","testID","rest","_objectWithoutProperties","_excluded","_React$useRef","useRef","Value","borderAnim","current","_React$useRef2","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","createElement","Consumer","context","checked","contextValue","fade","_extends","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["C:\\voluteer project\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\RadioButton\\RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}