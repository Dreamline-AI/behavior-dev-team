{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nvar defaultSize = 64;\nvar AvatarText = function AvatarText(_ref) {\n  var label = _ref.label,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    theme = _ref.theme,\n    labelStyle = _ref.labelStyle,\n    customColor = _ref.color,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var textColor = customColor !== null && customColor !== void 0 ? customColor : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  var _useWindowDimensions = useWindowDimensions(),\n    fontScale = _useWindowDimensions.fontScale;\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\nAvatarText.displayName = 'Avatar.Text';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withTheme(AvatarText);","map":{"version":3,"names":["React","View","StyleSheet","useWindowDimensions","Text","withTheme","white","getContrastingColor","defaultSize","AvatarText","_ref","label","_ref$size","size","style","theme","labelStyle","customColor","color","rest","_objectWithoutProperties","_excluded","_ref2","flatten","_ref2$backgroundColor","backgroundColor","colors","primary","restStyle","_excluded2","textColor","_useWindowDimensions","fontScale","createElement","_extends","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["C:\\volunteer\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Avatar\\AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  theme,\n  labelStyle,\n  color: customColor,\n  ...rest\n}: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,mBAAA;AASA,OAAOC,IAAP;AACA,SAASC,SAAT;AACA,SAASC,KAAT;AACA,OAAOC,mBAAP;AAEA,IAAMC,WAAW,GAAG,EAApB;AAgDA,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAGC,IAAA,EAQN;EAAA,IAPXC,KADkB,GAQPD,IAAA,CAPXC,KADkB;IAAAC,SAAA,GAQPF,IAAA,CANXG,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAGJ,WAFW,GAAAI,SAAA;IAGlBE,KAHkB,GAQPJ,IAAA,CALXI,KAHkB;IAIlBC,KAJkB,GAQPL,IAAA,CAJXK,KAJkB;IAKlBC,UALkB,GAQPN,IAAA,CAHXM,UALkB;IAMXC,WANW,GAQPP,IAAA,CAFXQ,KAAK;IACFC,IAAA,GAAAC,wBAAA,CACQV,IAAA,EAAAW,SAAA;EACX,IAAAC,KAAA,GACEpB,UAAU,CAACqB,OAAX,CAAmBT,KAAnB,KAA6B,EAD/B;IAAAU,qBAAA,GAAAF,KAAA,CAAQG,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAGT,KAAK,CAACW,MAAN,CAAaC,OAAjC,GAAAH,qBAAA;IAA6CI,SAAA,GAAAR,wBAAA,CAAAE,KAAA,EAAAO,UAAA;EAEnD,IAAMC,SAAS,GACbb,WADa,aACbA,WADa,cACbA,WADa,GAEbV,mBAAmB,CAACkB,eAAD,EAAkBnB,KAAlB,EAAyB,oBAAzB,CAFrB;EAGA,IAAAyB,oBAAA,GAAsB5B,mBAAmB,EAAzC;IAAQ6B,SAAA,GAAAD,oBAAA,CAAAC,SAAA;EAER,OACEhC,KAAA,CAAAiC,aAAA,CAAChC,IAAD,EAAAiC,QAAA;IACEpB,KAAK,EAAE,CACL;MACEqB,KAAK,EAAEtB,IADT;MAEEuB,MAAM,EAAEvB,IAFV;MAGEwB,YAAY,EAAExB,IAAI,GAAG,CAHvB;MAIEY,eAAA,EAAAA;IAJF,CADK,EAOLa,MAAM,CAACC,SAPF,EAQLX,SARK;EADT,GAWMT,IAXN,GAaEnB,KAAA,CAAAiC,aAAA,CAAC7B,IAAD;IACEU,KAAK,EAAE,CACLwB,MAAM,CAACE,IADF,EAEL;MACEtB,KAAK,EAAEY,SADT;MAEEW,QAAQ,EAAE5B,IAAI,GAAG,CAFnB;MAGE6B,UAAU,EAAE7B,IAAI,GAAGmB;IAHrB,CAFK,EAOLhB,UAPK,CADT;IAUE2B,aAAa,EAAE;EAVjB,GAYGhC,KAZH,CAbF,CADF;AA8BD,CA9CD;AAgDAF,UAAU,CAACmC,WAAX,GAAyB,aAAzB;AAEA,IAAMN,MAAM,GAAGpC,UAAU,CAAC2C,MAAX,CAAkB;EAC/BN,SAAS,EAAE;IACTO,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH,CADoB;EAK/BP,IAAI,EAAE;IACJQ,SAAS,EAAE,QADP;IAEJC,iBAAiB,EAAE;EAFf;AALyB,CAAlB,CAAf;AAWA,eAAe5C,SAAS,CAACI,UAAD,CAAxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}