{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"size\", \"style\", \"theme\", \"visible\"],\n  _excluded2 = [\"backgroundColor\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { white, black } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nimport getContrastingColor from \"../utils/getContrastingColor\";\nvar defaultSize = 20;\nvar Badge = function Badge(_ref) {\n  var children = _ref.children,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? defaultSize : _ref$size,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? true : _ref$visible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n    opacity = _React$useRef.current;\n  var _useWindowDimensions = useWindowDimensions(),\n    fontScale = _useWindowDimensions.fontScale;\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var textColor = getContrastingColor(backgroundColor, white, black);\n  var borderRadius = size / 2;\n  return React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [_objectSpread(_objectSpread({\n      opacity: opacity,\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5\n    }, theme.fonts.regular), {}, {\n      lineHeight: size / fontScale,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }), styles.container, restStyle]\n  }, rest), children);\n};\nexport default withTheme(Badge);\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Badge.tsx"],"names":["React","white","black","withTheme","getContrastingColor","defaultSize","Badge","children","size","style","theme","visible","rest","current","opacity","useRef","Animated","Value","fontScale","useWindowDimensions","isFirstRendering","animation","scale","useEffect","timing","toValue","duration","useNativeDriver","start","backgroundColor","colors","notification","restStyle","StyleSheet","flatten","textColor","borderRadius","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\nexport type Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { fontScale } = useWindowDimensions();\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size / fontScale,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}