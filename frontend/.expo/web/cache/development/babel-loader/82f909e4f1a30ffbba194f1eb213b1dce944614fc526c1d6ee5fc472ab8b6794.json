{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"ellipsizeMode\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n    children = _ref.children,\n    icon = _ref.icon,\n    avatar = _ref.avatar,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    onClose = _ref.onClose,\n    closeIcon = _ref.closeIcon,\n    textStyle = _ref.textStyle,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    selectedColor = _ref.selectedColor,\n    ellipsizeMode = _ref.ellipsizeMode,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(0)),\n    elevation = _React$useRef.current;\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  };\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n    }).start();\n  };\n  var dark = theme.dark,\n    colors = theme.colors;\n  var defaultBackgroundColor = mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? defaultBackgroundColor : _ref2$backgroundColor,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? 16 : _ref2$borderRadius;\n  var borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n  var textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n  var backgroundColorString = typeof backgroundColor === 'string' ? backgroundColor : defaultBackgroundColor;\n  var selectedBackgroundColor = (dark ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n  var underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n  var accessibilityTraits = ['button'];\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n  return React.createElement(Surface, _extends({\n    style: [styles.container, {\n      elevation: Platform.OS === 'android' ? elevation : 0,\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, rest), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: accessibilityTraits,\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, {\n      paddingRight: onClose ? 32 : 4\n    }]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, disabled && {\n      opacity: 0.26\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(View, {\n    style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : iconColor,\n    size: 18\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n      color: textColor,\n      marginRight: onClose ? 0 : 8,\n      marginLeft: avatar || icon || selected ? 4 : 8\n    }), textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: 16\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"close-circle\",\n    size: 16,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Chip.tsx"],"names":["React","color","Icon","MaterialCommunityIcon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","current","elevation","useRef","Animated","Value","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","Platform","OS","constants","reactNativeVersion","minor","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","backgroundColor","borderRadius","StyleSheet","flatten","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","styles","container","touchable","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","fonts","regular","marginRight","marginLeft","closeButtonStyle","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver:\n        Platform.OS === 'web' ||\n        Platform.constants.reactNativeVersion.minor <= 72,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const { backgroundColor = defaultBackgroundColor, borderRadius = 16 } =\n    (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (\n    dark\n      ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={16} />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"close-circle\"\n                  size={16}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}