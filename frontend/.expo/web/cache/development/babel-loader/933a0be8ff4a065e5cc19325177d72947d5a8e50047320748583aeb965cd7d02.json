{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n    screens = _ref.screens,\n    navigation = _ref.navigation,\n    screenOptions = _ref.screenOptions,\n    defaultScreenOptions = _ref.defaultScreenOptions,\n    onAction = _ref.onAction,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    addListener = _ref.addListener,\n    addKeyedListener = _ref.addKeyedListener,\n    onRouteFocus = _ref.onRouteFocus,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    options = _React$useState2[0],\n    setOptions = _React$useState2[1];\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    onDispatchAction = _React$useContext.onDispatchAction,\n    onOptionsChange = _React$useContext.onOptionsChange;\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n    var routeOptions = _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    })), options[route.key]);\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: routeOptions\n    }) : defaultScreenOptions), routeOptions);\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n            _ = o[_route$key],\n            rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n          return rest;\n        }\n        return o;\n      });\n    };\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\core\\lib\\module\\useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useRouteCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","screen","name","key","routeOptions","mergedOptions","clearOptions","o","_","rest","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}