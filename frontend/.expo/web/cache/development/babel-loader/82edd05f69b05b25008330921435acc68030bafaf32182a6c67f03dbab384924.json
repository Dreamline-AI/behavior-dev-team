{"ast":null,"code":"export var handlePress = function handlePress(_ref) {\n  var onPress = _ref.onPress,\n    value = _ref.value,\n    onValueChange = _ref.onValueChange;\n  if (onPress && onValueChange) {\n    console.warn(\"onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead\");\n  }\n  onValueChange ? onValueChange(value) : onPress === null || onPress === void 0 ? void 0 : onPress();\n};\nexport var isChecked = function isChecked(_ref2) {\n  var value = _ref2.value,\n    status = _ref2.status,\n    contextValue = _ref2.contextValue;\n  if (contextValue !== undefined && contextValue !== null) {\n    return contextValue === value ? 'checked' : 'unchecked';\n  } else {\n    return status;\n  }\n};","map":{"version":3,"sources":["D:\\Community Dreams frontend\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\RadioButton\\utils.ts"],"names":["handlePress","onPress","value","onValueChange","console","warn","isChecked","status","contextValue","undefined"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAW,CAAG,IAAA,EAQrB;EARsB,IAC1BC,OAD0B,GAQtB,IAAA,CAPJA,OAD0B;IAE1BC,KAF0B,GAQtB,IAAA,CANJA,KAF0B;IAG1BC,aAAAA,GAKI,IAAA,CALJA,aAAAA;EAMA,IAAIF,OAAO,IAAIE,aAAf,EAA8B;IAC5BC,OAAO,CAACC,IAARD,2FAAAA,CAAAA;EAGD;EAEDD,aAAa,GAAGA,aAAa,CAACD,KAAD,CAAhB,GAA0BD,OAA1B,KAAA,IAAA,IAA0BA,OAA1B,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA0BA,OAAO,CAAA,CAA9CE;AACD,CAhBM;AAkBP,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAS,CAAG,KAAA,EAQnB;EARoB,IACxBJ,KADwB,GAQpB,KAAA,CAPJA,KADwB;IAExBK,MAFwB,GAQpB,KAAA,CANJA,MAFwB;IAGxBC,YAAAA,GAKI,KAAA,CALJA,YAAAA;EAMA,IAAIA,YAAY,KAAKC,SAAjBD,IAA8BA,YAAY,KAAK,IAAnD,EAAyD;IACvD,OAAOA,YAAY,KAAKN,KAAjBM,GAAyB,SAAzBA,GAAqC,WAA5C;EACD,CAFD,MAEO;IACL,OAAOD,MAAP;EACD;AACF,CAdM","sourcesContent":["export const handlePress = ({\n  onPress,\n  value,\n  onValueChange,\n}: {\n  onPress?: () => void;\n  value: string;\n  onValueChange?: (value: string) => void;\n}) => {\n  if (onPress && onValueChange) {\n    console.warn(\n      `onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead`\n    );\n  }\n\n  onValueChange ? onValueChange(value) : onPress?.();\n};\n\nexport const isChecked = ({\n  value,\n  status,\n  contextValue,\n}: {\n  value: string;\n  status?: 'checked' | 'unchecked';\n  contextValue?: string;\n}) => {\n  if (contextValue !== undefined && contextValue !== null) {\n    return contextValue === value ? 'checked' : 'unchecked';\n  } else {\n    return status;\n  }\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}