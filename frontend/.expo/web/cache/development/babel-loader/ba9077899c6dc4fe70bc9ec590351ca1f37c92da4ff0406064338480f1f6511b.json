{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"../Modal\";\nimport DialogContent from \"./DialogContent\";\nimport DialogActions from \"./DialogActions\";\nimport DialogTitle from \"./DialogTitle\";\nimport DialogScrollArea from \"./DialogScrollArea\";\nimport { withTheme } from \"../../core/theming\";\nimport overlay from \"../../styles/overlay\";\nvar DIALOG_ELEVATION = 24;\nvar Dialog = function Dialog(_ref) {\n  var children = _ref.children,\n    _ref$dismissable = _ref.dismissable,\n    dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n    onDismiss = _ref.onDismiss,\n    _ref$visible = _ref.visible,\n    visible = _ref$visible === void 0 ? false : _ref$visible,\n    style = _ref.style,\n    theme = _ref.theme;\n  return React.createElement(Modal, {\n    dismissable: dismissable,\n    onDismiss: onDismiss,\n    visible: visible,\n    contentContainerStyle: [{\n      borderRadius: theme.roundness,\n      backgroundColor: theme.dark && theme.mode === 'adaptive' ? overlay(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface\n    }, styles.container, style],\n    theme: theme\n  }, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (i === 0 && React.isValidElement(child) && child.type === DialogContent) {\n      return React.cloneElement(child, {\n        style: [{\n          paddingTop: 24\n        }, child.props.style]\n      });\n    }\n    return child;\n  }));\n};\nDialog.Content = DialogContent;\nDialog.Actions = DialogActions;\nDialog.Title = DialogTitle;\nDialog.ScrollArea = DialogScrollArea;\nvar styles = StyleSheet.create({\n  container: {\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start'\n  }\n});\nexport default withTheme(Dialog);","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/react-native-paper/lib/module/components/Dialog/Dialog.tsx"],"names":["React","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","overlay","DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","props","Content","Actions","Title","ScrollArea","create","marginVertical","Platform","OS","marginHorizontal","elevation","justifyContent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAA,UAAA;AAAA,OAAA,QAAA;AAEA,OAAOC,KAAP;AACA,OAAOC,aAAP;AACA,OAAOC,aAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,gBAAP;AACA,SAASC,SAAT;AACA,OAAOC,OAAP;AA0BA,IAAMC,gBAAwB,GAAG,EAAjC;AA+CA,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAG,IAAA,EAAA;EAAA,IACbC,QADc,GAAD,IAAA,CACbA,QADc;IAAA,gBAAA,GAAD,IAAA,CAEbC,WAAW;IAAXA,WAAW,GAAA,gBAAA,cAAG,IAFA,GAAA,gBAAA;IAGdC,SAHc,GAAD,IAAA,CAGbA,SAHc;IAAA,YAAA,GAAD,IAAA,CAIbC,OAAO;IAAPA,OAAO,GAAA,YAAA,cAAG,KAJI,GAAA,YAAA;IAKdC,KALc,GAAD,IAAA,CAKbA,KALc;IAMdC,KAAAA,GANa,IAAA,CAMbA,KAAAA;EANa,OAQb,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;IACE,WAAW,EAAEJ,WADf;IAEE,SAAS,EAAEC,SAFb;IAGE,OAAO,EAAEC,OAHX;IAIE,qBAAqB,EAAE,CACrB;MACEG,YAAY,EAAED,KAAK,CAACE,SADtB;MAEEC,eAAe,EACbH,KAAK,CAACI,IAANJ,IAAcA,KAAK,CAACK,IAANL,KAAe,UAA7BA,GACIR,OAAO,CAACC,gBAAD,EAAmBO,KAAK,CAACM,MAANN,CAAaO,OAAhC,CADXP,GAEIA,KAAK,CAACM,MAANN,CAAaO;IALrB,CADqB,EAQrBC,MAAM,CAACC,SARc,EASrBV,KATqB,CAJzB;IAeE,KAAK,EAAEC;EAfT,CAAA,EAiBG,KAAK,CAACU,QAAN,CAAeC,OAAf,CAAuBhB,QAAvB,CAAA,CACEiB,MADF,CACUC,UAAAA,KAAD;IAAA,OAAWA,KAAK,IAAI,IAATA,IAAiB,OAAOA,KAAP,KAAiB,SADtD;EAAA,EAAA,CAEEC,GAFF,CAEM,UAACD,KAAD,EAAQE,CAAR,EAAc;IACjB,IACEA,CAAC,KAAK,CAANA,IACA9B,KAAK,CAAC+B,cAAN/B,CAAqB4B,KAArB5B,CADA8B,IAEAF,KAAK,CAACI,IAANJ,KAAe1B,aAHjB,EAIE;MAEA,OAAO,KAAK,CAAC+B,YAAN,CAAmBL,KAAnB,EAA0B;QAC/Bd,KAAK,EAAE,CAAC;UAAEoB,UAAU,EAAE;QAAd,CAAD,EAAqBN,KAAK,CAACO,KAANP,CAAYd,KAAjC;MADwB,CAA1B,CAAP;IAGD;IAED,OAAOc,KAAP;EACD,CAfF,CAjBH,CARa;AAAA,CAAf;AA6CAnB,MAAM,CAAC2B,OAAP3B,GAAiBP,aAAjBO;AAEAA,MAAM,CAAC4B,OAAP5B,GAAiBN,aAAjBM;AAEAA,MAAM,CAAC6B,KAAP7B,GAAeL,WAAfK;AAEAA,MAAM,CAAC8B,UAAP9B,GAAoBJ,gBAApBI;AAEA,IAAMc,MAAM,GAAG,UAAU,CAACiB,MAAX,CAAkB;EAC/BhB,SAAS,EAAE;IAQTiB,cAAc,EAAEC,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,GAA4B,EAA5BA,GAAiC,CARxC;IASTE,gBAAgB,EAAE,EATT;IAUTC,SAAS,EAAErC,gBAVF;IAWTsC,cAAc,EAAE;EAXP;AADoB,CAAlB,CAAf;AAgBA,eAAexC,SAAS,CAACG,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\nexport type Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n    theme={theme}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}