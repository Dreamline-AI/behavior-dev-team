{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from \"../styles/colors\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n    disabled = _ref.disabled,\n    onValueChange = _ref.onValueChange,\n    color = _ref.color,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var checkedColor = color || theme.colors.accent;\n  var onTintColor = Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? setColor(white).alpha(0.1).rgb().string() : setColor(black).alpha(0.12).rgb().string() : setColor(checkedColor).alpha(0.5).rgb().string();\n  var thumbTintColor = Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? grey800 : grey400 : value ? checkedColor : theme.dark ? grey400 : grey50;\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: ''\n    }\n  };\n  return React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nexport default withTheme(Switch);","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/react-native-paper/lib/module/components/Switch.tsx"],"names":["React","grey400","grey800","grey50","white","black","setColor","withTheme","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","alpha","rgb","string","thumbTintColor","props","major","minor","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,KAA1C;AAAA,OAAA,aAAA;AAAA,OAAA,QAAA;AAAA,OAAA,YAAA;AAQA,OAAOC,QAAP,MAAqB,OAArB;AACA,SAASC,SAAT;AAEA,IAAMC,OAAO,GAAGC,aAAa,CAACC,iBAAdD,GACZA,aAAa,CAACC,iBAAdD,CAAgCE,kBADpBF,GAEZG,SAFJ;AAkEA,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAG,IAAA,EAOF;EAPG,IACdC,KADc,GAOH,IAAA,CANXA,KADc;IAEdC,QAFc,GAOH,IAAA,CALXA,QAFc;IAGdC,aAHc,GAOH,IAAA,CAJXA,aAHc;IAIdC,KAJc,GAOH,IAAA,CAHXA,KAJc;IAKdC,KALc,GAOH,IAAA,CAFXA,KALc;IAMXC,IAAAA,GAAAA,wBAAAA,CACQ,IAAA,EAAA,SAAA;EACX,IAAMC,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAACG,MAANH,CAAaI,MAA3C;EAEA,IAAMC,WAAW,GACfC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GACIJ,YADJI,GAEIT,QAAQ,GACRG,KAAK,CAACQ,IAANR,GACEZ,QAAQ,CAACF,KAAD,CAARE,CAAgBqB,KAAhBrB,CAAsB,GAAtBA,CAAAA,CAA2BsB,GAA3BtB,CAAAA,CAAAA,CAAiCuB,MAAjCvB,CAAAA,CADFY,GAEEZ,QAAQ,CAACD,KAAD,CAARC,CAAgBqB,KAAhBrB,CAAsB,IAAtBA,CAAAA,CAA4BsB,GAA5BtB,CAAAA,CAAAA,CAAkCuB,MAAlCvB,CAAAA,CAHM,GAIRA,QAAQ,CAACc,YAAD,CAARd,CAAuBqB,KAAvBrB,CAA6B,GAA7BA,CAAAA,CAAkCsB,GAAlCtB,CAAAA,CAAAA,CAAwCuB,MAAxCvB,CAAAA,CAPN;EASA,IAAMwB,cAAc,GAClBN,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GACIZ,SADJY,GAEIT,QAAQ,GACRG,KAAK,CAACQ,IAANR,GACEhB,OADFgB,GAEEjB,OAHM,GAIRa,KAAK,GACLM,YADK,GAELF,KAAK,CAACQ,IAANR,GACAjB,OADAiB,GAEAf,MAXN;EAaA,IAAM4B,KAAK,GACT,OAAO,IAAIvB,OAAO,CAACwB,KAARxB,KAAkB,CAA7B,IAAkCA,OAAO,CAACyB,KAARzB,IAAiB,EAAnD,GACI;IACEe,WADF,EACEA,WADF;IAEEO,cAAAA,EAAAA;EAFF,CADJ,GAKI,QAAQ,CAACL,EAAT,KAAgB,KAAhB,GACA;IACES,gBAAgB,EAAEX,WADpB;IAEEY,UAAU,EAAEL,cAFd;IAGEM,gBAAgB,EAAEhB;EAHpB,CADA,GAMA;IACEe,UAAU,EAAEL,cADd;IAEEO,UAAU,EAAE;MACVC,IAAI,EAAEf,WADI;MAEVgB,KAAK,EAAE;IAFG;EAFd,CAZN;EAoBA,OACE,KAAA,CAAA,aAAA,CAAC,YAAD,EAAA,QAAA,CAAA;IACE,KAAK,EAAEzB,KADT;IAEE,QAAQ,EAAEC,QAFZ;IAGE,aAAa,EAAEA,QAAQ,GAAGH,SAAH,GAAeI;EAHxC,CAAA,EAIMe,KAJN,EAKMZ,IALN,CAAA,CADF;AASD,CA7DD;AA+DA,eAAeZ,SAAS,CAACM,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const checkedColor = color || theme.colors.accent;\n\n  const onTintColor =\n    Platform.OS === 'ios'\n      ? checkedColor\n      : disabled\n      ? theme.dark\n        ? setColor(white).alpha(0.1).rgb().string()\n        : setColor(black).alpha(0.12).rgb().string()\n      : setColor(checkedColor).alpha(0.5).rgb().string();\n\n  const thumbTintColor =\n    Platform.OS === 'ios'\n      ? undefined\n      : disabled\n      ? theme.dark\n        ? grey800\n        : grey400\n      : value\n      ? checkedColor\n      : theme.dark\n      ? grey400\n      : grey50;\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: '',\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}