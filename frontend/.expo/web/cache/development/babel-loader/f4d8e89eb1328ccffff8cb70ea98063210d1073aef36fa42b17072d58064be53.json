{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"children\", \"screenOptions\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from \"../views/Stack/StackView\";\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    children = _ref.children,\n    screenOptions = _ref.screenOptions,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'\n  };\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n      initialRouteName: initialRouteName,\n      children: children,\n      screenOptions: typeof screenOptions === 'function' ? function () {\n        return _objectSpread(_objectSpread({}, defaultOptions), screenOptions.apply(void 0, arguments));\n      } : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation;\n  React.useEffect(function () {\n    var _navigation$addListen;\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-navigation/stack/lib/module/navigators/createStackNavigator.tsx"],"names":["React","useNavigationBuilder","createNavigatorFactory","StackRouter","StackActions","StackView","StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","Platform","OS","animationEnabled","state","descriptors","navigation","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAA,QAAA;AAEA,SACEC,oBADF,EAEEC,sBAFF,EAKEC,WALF,EAQEC,YARF,QAWO,0BAXP;AAYA,OAAOC,SAAP;AAWA,SAASC,cAAT,CAAA,IAAA,EAKU;EAAA,IAJRC,gBADsB,GAAA,IAAA,CACtBA,gBADsB;IAEtBC,QAFsB,GAAA,IAAA,CAEtBA,QAFsB;IAGtBC,aAHsB,GAAA,IAAA,CAGtBA,aAHsB;IAInBC,IAAAA,GAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,SAAAA;EAEH,IAAMC,cAAc,GAAG;IACrBC,cAAc,EAAEC,QAAQ,CAACC,EAATD,KAAgB,KADX;IAErBE,gBAAgB,EACdF,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IACAA,QAAQ,CAACC,EAATD,KAAgB,SADhBA,IAEAA,QAAQ,CAACC,EAATD,KAAgB;EALG,CAAvB;EAQA,IAAA,qBAAA,GAA2CZ,oBAAoB,CAM7DE,WAN6D,EAMhD;MACbI,gBADa,EACbA,gBADa;MAEbC,QAFa,EAEbA,QAFa;MAGbC,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI;QAAA,OAAA,aAAA,CAAA,aAAA,KACKE,cADS,GAETF,aAAa,CAAA,KAAA,SAAA,SAAA,CAAA;MAAA,CAHtB,GAAA,aAAA,CAAA,aAAA,KAMSE,cADL,GAEKF,aAAAA;IAXE,CANgD,CAA/D;IAAQO,KAAF,GAAA,qBAAA,CAAEA,KAAF;IAASC,WAAT,GAAA,qBAAA,CAASA,WAAT;IAAsBC,UAAAA,GAAAA,qBAAAA,CAAAA,UAAAA;EAqB5BlB,KAAK,CAACmB,SAANnB,CACE,YAAA;IAAA,IAAA,qBAAA;IAAA,OAAA,CAAA,qBAAA,GACEkB,UAAU,CAACE,WADb,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEF,qBAAAA,CAAAA,IAAAA,CAAAA,UAAU,EAAe,UAAf,EAA4BG,UAAAA,CAAD,EAAO;MAC1C,IAAMC,SAAS,GAAGJ,UAAU,CAACI,SAAXJ,CAAAA,CADwB;MAK1CK,qBAAqB,CAAC,YAAM;QAC1B,IACEP,KAAK,CAACQ,KAANR,GAAc,CAAdA,IACAM,SADAN,IAEA,CAAEK,CAAD,CAAkCI,gBAHrC,EAIE;UAGAP,UAAU,CAACQ,QAAXR,CAAAA,aAAAA,CAAAA,aAAAA,KACKd,YAAY,CAACuB,QAAbvB,CAAAA,CADe;YAElBwB,MAAM,EAAEZ,KAAK,CAACa;UAAAA,EAFhBX,CAAAA;QAID;MACF,CAboB,CAArBK;IAcD,CAnBS,CADZ;EAAA,CADFvB,EAsBE,CAACkB,UAAD,EAAaF,KAAK,CAACQ,KAAnB,EAA0BR,KAAK,CAACa,GAAhC,CAtBF7B,CAAAA;EAyBA,OACE,KAAA,CAAA,aAAA,CAAC,SAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMU,IADN,EAAA;IAEE,KAAK,EAAEM,KAFT;IAGE,WAAW,EAAEC,WAHf;IAIE,UAAU,EAAEC;EAJd,CAAA,CAAA,CADF;AAQD;AAED,eAAehB,sBAAsB,CAKnCI,cALmC,CAArC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}