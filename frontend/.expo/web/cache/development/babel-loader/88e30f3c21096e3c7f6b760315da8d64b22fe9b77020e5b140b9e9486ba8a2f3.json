{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"dark\", \"style\", \"theme\"],\n  _excluded2 = [\"backgroundColor\", \"elevation\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport AppbarContent from \"./AppbarContent\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\nimport overlay from \"../../styles/overlay\";\nexport var DEFAULT_APPBAR_HEIGHT = 56;\nvar Appbar = function Appbar(_ref) {\n  var children = _ref.children,\n    dark = _ref.dark,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var colors = theme.colors,\n    isDarkTheme = theme.dark,\n    mode = theme.mode;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    customBackground = _ref2.backgroundColor,\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? 4 : _ref2$elevation,\n    restStyle = _objectWithoutProperties(_ref2, _excluded2);\n  var isDark;\n  var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !color(backgroundColor).isLight() : true;\n  }\n  var shouldCenterContent = false;\n  var shouldAddLeftSpacing = false;\n  var shouldAddRightSpacing = false;\n  if (Platform.OS === 'ios') {\n    var hasAppbarContent = false;\n    var leftItemsCount = 0;\n    var rightItemsCount = 0;\n    React.Children.forEach(children, function (child) {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return React.createElement(Surface, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, styles.appbar, {\n      elevation: elevation\n    }, restStyle]\n  }, rest), shouldAddLeftSpacing ? React.createElement(View, {\n    style: styles.spacing\n  }) : null, React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).map(function (child, i) {\n    if (!React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction].includes(child.type)) {\n      return child;\n    }\n    var props = {\n      color: typeof child.props.color !== 'undefined' ? child.props.color : isDark ? white : black\n    };\n    if (child.type === AppbarContent) {\n      props.style = [i !== 0 && {\n        marginLeft: 8\n      }, shouldCenterContent && {\n        alignItems: 'center'\n      }, child.props.style];\n    }\n    return React.cloneElement(child, props);\n  }), shouldAddRightSpacing ? React.createElement(View, {\n    style: styles.spacing\n  }) : null);\n};\nvar styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4\n  },\n  spacing: {\n    width: 48\n  }\n});\nexport default withTheme(Appbar);\nvar AppbarWithTheme = withTheme(Appbar);\nexport { AppbarWithTheme as Appbar };","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Appbar\\Appbar.tsx"],"names":["React","color","AppbarContent","AppbarAction","AppbarBackAction","Surface","withTheme","black","white","overlay","DEFAULT_APPBAR_HEIGHT","Appbar","children","dark","style","theme","rest","colors","isDarkTheme","mode","backgroundColor","customBackground","elevation","restStyle","StyleSheet","flatten","isDark","surface","primary","isLight","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","OS","hasAppbarContent","leftItemsCount","rightItemsCount","Children","forEach","child","isValidElement","type","styles","appbar","spacing","toArray","filter","map","i","includes","props","marginLeft","alignItems","cloneElement","create","height","flexDirection","paddingHorizontal","width","AppbarWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\nexport type Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nconst Appbar = ({ children, dark, style, theme, ...rest }: Props) => {\n  const { colors, dark: isDarkTheme, mode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if (Platform.OS === 'ios') {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return (\n    <Surface\n      style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (\n            !React.isValidElement(child) ||\n            ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n              // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n              child.type\n            )\n          ) {\n            return child;\n          }\n\n          const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n            color:\n              typeof child.props.color !== 'undefined'\n                ? child.props.color\n                : isDark\n                ? white\n                : black,\n          };\n\n          if (child.type === AppbarContent) {\n            props.style = [\n              // Since content is not first item, add extra left margin\n              i !== 0 && { marginLeft: 8 },\n              shouldCenterContent && { alignItems: 'center' },\n              child.props.style,\n            ];\n          }\n          return React.cloneElement(child, props);\n        })}\n      {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}