{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function useIsKeyboardShown(_ref) {\n  var onShow = _ref.onShow,\n    onHide = _ref.onHide;\n  React.useEffect(function () {\n    var willShowSubscription;\n    var willHideSubscription;\n    var didShowSubscription;\n    var didHideSubscription;\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n    return function () {\n      if (Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\utils\\useIsKeyboardShown.tsx"],"names":["React","useIsKeyboardShown","onShow","onHide","useEffect","willShowSubscription","willHideSubscription","didShowSubscription","didHideSubscription","Platform","OS","Keyboard","addListener","remove","removeListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAA,QAAA;AAAA,OAAA,QAAA;AAOA,eAAe,SAASC,kBAAT,CAAA,IAAA,EAAuD;EAA3B,IAAEC,MAAF,GAA2B,IAAA,CAAzBA,MAAF;IAAUC,MAAAA,GAAiB,IAAA,CAAjBA,MAAAA;EACnDH,KAAK,CAACI,SAANJ,CAAgB,YAAM;IACpB,IAAIK,oBAAJ;IACA,IAAIC,oBAAJ;IACA,IAAIC,mBAAJ;IACA,IAAIC,mBAAJ;IAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzBJ,oBAAoB,GAAGM,QAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCT,MAAzCS,CAAvBN;MACAC,oBAAoB,GAAGK,QAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCR,MAAzCQ,CAAvBL;IACD,CAHD,MAGO;MACLC,mBAAmB,GAAGI,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCT,MAAxCS,CAAtBJ;MACAC,mBAAmB,GAAGG,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCR,MAAxCQ,CAAtBH;IACD;IAED,OAAO,YAAM;MACX,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;QAAA,IAAA,qBAAA,EAAA,qBAAA;QACzB,IAAA,CAAA,qBAAA,GAAIJ,oBAAJ,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIA,qBAAAA,CAAsBQ,MAA1B,EAAkC;UAChCR,oBAAoB,CAACQ,MAArBR,CAAAA,CAAAA;QACD,CAFD,MAEO;UACLM,QAAQ,CAACG,cAATH,CAAwB,kBAAxBA,EAA4CT,MAA5CS,CAAAA;QACD;QAED,IAAA,CAAA,qBAAA,GAAIL,oBAAJ,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIA,qBAAAA,CAAsBO,MAA1B,EAAkC;UAChCP,oBAAoB,CAACO,MAArBP,CAAAA,CAAAA;QACD,CAFD,MAEO;UACLK,QAAQ,CAACG,cAATH,CAAwB,kBAAxBA,EAA4CR,MAA5CQ,CAAAA;QACD;MACF,CAZD,MAYO;QAAA,IAAA,oBAAA,EAAA,oBAAA;QACL,IAAA,CAAA,oBAAA,GAAIJ,mBAAJ,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,IAAIA,oBAAAA,CAAqBM,MAAzB,EAAiC;UAC/BN,mBAAmB,CAACM,MAApBN,CAAAA,CAAAA;QACD,CAFD,MAEO;UACLI,QAAQ,CAACG,cAATH,CAAwB,iBAAxBA,EAA2CT,MAA3CS,CAAAA;QACD;QAED,IAAA,CAAA,oBAAA,GAAIH,mBAAJ,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,IAAIA,oBAAAA,CAAqBK,MAAzB,EAAiC;UAC/BL,mBAAmB,CAACK,MAApBL,CAAAA,CAAAA;QACD,CAFD,MAEO;UACLG,QAAQ,CAACG,cAATH,CAAwB,iBAAxBA,EAA2CR,MAA3CQ,CAAAA;QACD;MACF;IACF,CA1BD;EA2BD,CAzCDX,EAyCG,CAACG,MAAD,EAASD,MAAT,CAzCHF,CAAAA;AA0CD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}