{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport NavigationContext from \"./NavigationContext\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport { PrivateValueStore } from \"./types\";\nPrivateValueStore;\nexport default function useNavigationHelpers(_ref) {\n  var onAction = _ref.onAction,\n    getState = _ref.getState,\n    emitter = _ref.emitter,\n    router = _ref.router;\n  var onUnhandledAction = React.useContext(UnhandledActionContext);\n  var parentNavigationHelpers = React.useContext(NavigationContext);\n  return React.useMemo(function () {\n    var dispatch = function dispatch(op) {\n      var action = typeof op === 'function' ? op(getState()) : op;\n      var handled = onAction(action);\n      if (!handled) {\n        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);\n      }\n    };\n    var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n    var helpers = Object.keys(actions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(actions[name].apply(actions, arguments));\n      };\n      return acc;\n    }, {});\n    return _objectSpread(_objectSpread(_objectSpread({}, parentNavigationHelpers), helpers), {}, {\n      dispatch: dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : function () {\n        return true;\n      },\n      canGoBack: function canGoBack() {\n        var state = getState();\n        return router.getStateForAction(state, CommonActions.goBack(), {\n          routeNames: state.routeNames,\n          routeParamList: {},\n          routeGetIdList: {}\n        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;\n      },\n      getParent: function getParent() {\n        return parentNavigationHelpers;\n      },\n      getState: getState,\n      dangerouslyGetParent: function dangerouslyGetParent() {\n        return parentNavigationHelpers;\n      },\n      dangerouslyGetState: getState\n    });\n  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);\n}","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\core\\lib\\module\\useNavigationHelpers.tsx"],"names":["React","CommonActions","NavigationContext","UnhandledActionContext","PrivateValueStore","useNavigationHelpers","onAction","getState","emitter","router","onUnhandledAction","useContext","parentNavigationHelpers","useMemo","dispatch","op","action","handled","actions","actionCreators","helpers","keys","reduce","acc","name","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList","routeGetIdList","getParent","dangerouslyGetParent","dangerouslyGetState"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAMO,2BANP;AAOA,OAAOC,iBAAP;AACA,OAAOC,sBAAP;AAEA,SAA4CC,iBAA5C;AAIAA,iBAAiB;AAgBjB,eAAe,SAASC,oBAAT,CAAA,IAAA,EAKoD;EAAA,IAA/DC,QAAF,GAAA,IAAA,CAAEA,QAAF;IAAYC,QAAZ,GAAA,IAAA,CAAYA,QAAZ;IAAsBC,OAAtB,GAAA,IAAA,CAAsBA,OAAtB;IAA+BC,MAAAA,GAAAA,IAAAA,CAAAA,MAAAA;EAC/B,IAAMC,iBAAiB,GAAGV,KAAK,CAACW,UAANX,CAAiBG,sBAAjBH,CAA1B;EACA,IAAMY,uBAAuB,GAAGZ,KAAK,CAACW,UAANX,CAAiBE,iBAAjBF,CAAhC;EAEA,OAAO,KAAK,CAACa,OAAN,CAAc,YAAM;IACzB,IAAMC,QAAQ,GAAIC,SAAZD,QAAQ,CAAIC,EAAD,EAA6C;MAC5D,IAAMC,MAAM,GAAG,OAAOD,EAAP,KAAc,UAAd,GAA2BA,EAAE,CAACR,QAAQ,CAAA,CAAT,CAA7B,GAA4CQ,EAA3D;MAEA,IAAME,OAAO,GAAGX,QAAQ,CAACU,MAAD,CAAxB;MAEA,IAAI,CAACC,OAAL,EAAc;QACZP,iBAAiB,KAAA,IAAjBA,IAAAA,iBAAiB,KAAA,KAAA,CAAjBA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,CAAGM,MAAH,CAAjBN;MACD;IACF,CARD;IAUA,IAAMQ,OAAO,GAAA,aAAA,CAAA,aAAA,KACRT,MAAM,CAACU,cADI,GAEXlB,aAAAA,CAFL;IAKA,IAAMmB,OAAO,GAAG,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAA,CAAqBI,MAArB,CACd,UAACC,GAAD,EAAMC,IAAN,EAAe;MAEbD,GAAG,CAACC,IAAD,CAAHD,GAAY;QAAA,OAAkBT,QAAQ,CAACI,OAAO,CAACM,IAAD,CAAPN,CAAAA,KAAAA,CAAAA,OAAO,EAAA,SAAPA,CAAD,CAAtCK;MAAAA;MACA,OAAOA,GAAP;IACD,CALa,EAMd,CAAA,CANc,CAAhB;IASA,OAAA,aAAA,CAAA,aAAA,CAAA,aAAA,KACKX,uBADE,GAEFQ,OAFE;MAGLN,QAHK,EAGLA,QAHK;MAILW,IAAI,EAAEjB,OAAO,CAACiB,IAJT;MAKLC,SAAS,EAAEd,uBAAuB,GAC9BA,uBAAuB,CAACc,SADM,GAE9B;QAAA,OAAM,IAPL;MAAA;MAQLC,SAAS,EAAE,SAAA,UAAA,EAAM;QACf,IAAMC,KAAK,GAAGrB,QAAQ,CAAA,CAAtB;QAEA,OACE,MAAM,CAACsB,iBAAP,CAAyBD,KAAzB,EAAgC3B,aAAa,CAAC6B,MAAd7B,CAAAA,CAAhC,EAAkE;UAChE8B,UAAU,EAAEH,KAAK,CAACG,UAD8C;UAEhEC,cAAc,EAAE,CAAA,CAFgD;UAGhEC,cAAc,EAAE,CAAA;QAHgD,CAAlE,CAAA,KAIO,IAJP,KAKArB,uBALA,KAAA,IAAA,IAKAA,uBALA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAKAA,uBAAuB,CAAEe,SAAzBf,CAAAA,CALA,CAAA,IAMA,KAPF;MASD,CApBI;MAqBLsB,SAAS,EAAE,SAAA,UAAA;QAAA,OAAMtB,uBArBZ;MAAA;MAsBLL,QAtBK,EAsBLA,QAtBK;MAuBL4B,oBAAoB,EAAE,SAAA,qBAAA;QAAA,OAAMvB,uBAvBvB;MAAA;MAwBLwB,mBAAmB,EAAE7B;IAAAA;EAIxB,CArDM,EAqDJ,CACDC,OAAO,CAACiB,IADP,EAEDlB,QAFC,EAGDD,QAHC,EAIDI,iBAJC,EAKDE,uBALC,EAMDH,MANC,CArDI,CAAP;AA6DD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-expect-error: name is a valid key, but TypeScript is dumb\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getParent: () => parentNavigationHelpers as any,\n      getState,\n      dangerouslyGetParent: () => parentNavigationHelpers as any,\n      dangerouslyGetState: getState,\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined) &\n      ActionHelpers;\n  }, [\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}