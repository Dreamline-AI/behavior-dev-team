{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport { white, black } from \"../../styles/colors\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    onLongPress = _ref.onLongPress,\n    onPress = _ref.onPress,\n    _ref$mode = _ref.mode,\n    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    children = _ref.children,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n    elevation = _React$useRef.current;\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n    elevationDarkAdaptive = _React$useRef2.current;\n  var animation = theme.animation,\n    dark = theme.dark,\n    mode = theme.mode,\n    roundness = theme.roundness;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n      }).start();\n    }\n  };\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = color(dark ? white : black).alpha(0.12).rgb().string();\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: computedElevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/react-native-paper/lib/module/components/Card/Card.tsx"],"names":["React","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","current","useRef","Animated","Value","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","Platform","OS","constants","reactNativeVersion","minor","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","computedElevation","borderRadius","styles","outlined","undefined","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink","borderWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}