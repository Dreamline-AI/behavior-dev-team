{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { black, white } from \"../../styles/colors\";\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n    size = _ref.size,\n    theme = _ref.theme,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    value = _ref.value,\n    status = _ref.status,\n    _onPress = _ref.onPress,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);\nvar ToggleButtonWithTheme = withTheme(ToggleButton);\nexport { ToggleButtonWithTheme as ToggleButton };","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\ToggleButton\\ToggleButton.tsx"],"names":["React","withTheme","color","IconButton","ToggleButtonGroupContext","black","white","ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","selected","styles","content","borderColor","alpha","rgb","string","create","width","height","margin","ToggleButtonWithTheme"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAA,UAAA;AAOA,SAASC,SAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AACA,SAASC,wBAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;AA6EA,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAG,IAAA,EAWR;EAXS,IACpBC,IADoB,GAWT,IAAA,CAVXA,IADoB;IAEpBC,IAFoB,GAWT,IAAA,CATXA,IAFoB;IAGpBC,KAHoB,GAWT,IAAA,CARXA,KAHoB;IAIpBC,kBAJoB,GAWT,IAAA,CAPXA,kBAJoB;IAKpBC,QALoB,GAWT,IAAA,CANXA,QALoB;IAMpBC,KANoB,GAWT,IAAA,CALXA,KANoB;IAOpBC,KAPoB,GAWT,IAAA,CAJXA,KAPoB;IAQpBC,MARoB,GAWT,IAAA,CAHXA,MARoB;IASpBC,QAToB,GAWT,IAAA,CAFXA,OAToB;IAUjBC,IAAAA,GAAAA,wBAAAA,CACQ,IAAA,EAAA,SAAA;EACX,IAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAA0B,QAA1B,EAAA,IAAA,EACIC,UAAAA,OAAD,EAAuE;IACtE,IAAIC,eAAJ;IAEA,IAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACN,KAARM,KAAkBN,KAA9B,IAAwCC,MAAM,KAAK,SADrD;IAGA,IAAIO,OAAJ,EAAa;MACXD,eAAe,GAAGX,KAAK,CAACa,IAANb,GACd,0BADcA,GAEd,oBAFJW;IAGD,CAJD,MAIO;MACLA,eAAe,GAAG,aAAlBA;IACD;IAED,OACE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAA,QAAA,CAAA;MACE,UAAU,EAAE,KADd;MAEE,IAAI,EAAEb,IAFR;MAGE,OAAO,EAAGgB,SAAAA,QAAAA,CAAD,EAAwC;QAC/C,IAAIR,QAAJ,EAAa;UACXA,QAAO,CAACQ,CAAD,CAAPR;QACD;QAED,IAAII,OAAJ,EAAa;UACXA,OAAO,CAACK,aAARL,CAAsB,CAACE,OAAD,GAAWR,KAAX,GAAmB,IAAzCM,CAAAA;QACD;MACF,CAXH;MAYE,IAAI,EAAEX,IAZR;MAaE,kBAAkB,EAAEE,kBAbtB;MAcE,kBAAkB,EAAE;QAAEC,QAAF,EAAEA,QAAF;QAAYc,QAAQ,EAAEJ;MAAtB,CAdtB;MAeE,QAAQ,EAAEV,QAfZ;MAgBE,KAAK,EAAE,CACLe,MAAM,CAACC,OADF,EAEL;QACEP,eADF,EACEA,eADF;QAEEH,YAFF,EAEEA,YAFF;QAGEW,WAAW,EAAE3B,KAAK,CAACQ,KAAK,CAACa,IAANb,GAAaJ,KAAbI,GAAqBL,KAAtB,CAALH,CACV4B,KADU5B,CACJ,IADIA,CAAAA,CAEV6B,GAFU7B,CAAAA,CAAAA,CAGV8B,MAHU9B,CAAAA;MAHf,CAFK,EAULW,KAVK;IAhBT,CAAA,EA4BMI,IA5BN,CAAA,CADF;EAgCD,CA/CH,CADF;AAmDD,CAjED;AAmEA,IAAMU,MAAM,GAAG,UAAU,CAACM,MAAX,CAAkB;EAC/BL,OAAO,EAAE;IACPM,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlB,CAAf;AAQA,eAAenC,SAAS,CAACM,YAAD,CAAxB;AAGA,IAAM8B,qBAAqB,GAAGpC,SAAS,CAACM,YAAD,CAAvC;AAEA,SAAS8B,qBAAqB,IAAI9B,YAAlC","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}