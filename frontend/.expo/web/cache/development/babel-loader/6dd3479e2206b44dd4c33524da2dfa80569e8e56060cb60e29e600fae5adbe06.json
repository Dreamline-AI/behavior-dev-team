{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ToggleButtonGroup from \"./ToggleButtonGroup\";\nimport ToggleButton from \"./ToggleButton\";\nvar ToggleButtonRow = function ToggleButtonRow(_ref) {\n  var value = _ref.value,\n    onValueChange = _ref.onValueChange,\n    children = _ref.children,\n    style = _ref.style;\n  var count = React.Children.count(children);\n  return React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, function (child, i) {\n    if (child && child.type === ToggleButton) {\n      return React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n      });\n    }\n    return child;\n  })));\n};\nToggleButtonRow.displayName = 'ToggleButton.Row';\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow;\nexport { ToggleButtonRow };","map":{"version":3,"names":["React","StyleSheet","View","ToggleButtonGroup","ToggleButton","ToggleButtonRow","_ref","value","onValueChange","children","style","count","Children","createElement","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAEA,OAAOC,iBAAP;AACA,OAAOC,YAAP;AA+CA,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAGC,IAAA,EAAsD;EAAA,IAAnDC,KAAF,GAAqDD,IAAA,CAAnDC,KAAF;IAASC,aAAT,GAAqDF,IAAA,CAA5CE,aAAT;IAAwBC,QAAxB,GAAqDH,IAAA,CAA7BG,QAAxB;IAAkCC,KAAA,GAAmBJ,IAAA,CAAnBI,KAAA;EACzD,IAAMC,KAAK,GAAGX,KAAK,CAACY,QAAN,CAAeD,KAAf,CAAqBF,QAArB,CAAd;EAEA,OACET,KAAA,CAAAa,aAAA,CAACV,iBAAD;IAAmBI,KAAK,EAAEA,KAA1B;IAAiCC,aAAa,EAAEA;EAAhD,GACER,KAAA,CAAAa,aAAA,CAACX,IAAD;IAAMQ,KAAK,EAAE,CAACI,MAAM,CAACC,GAAR,EAAaL,KAAb;EAAb,GACGV,KAAK,CAACY,QAAN,CAAeI,GAAf,CAAmBP,QAAnB,EAA6B,UAACQ,KAAD,EAAQC,CAAR,EAAc;IAE1C,IAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAef,YAA5B,EAA0C;MAExC,OAAOJ,KAAK,CAACoB,YAAN,CAAmBH,KAAnB,EAA0B;QAC/BP,KAAK,EAAE,CACLI,MAAM,CAACO,MADF,EAELH,CAAC,KAAK,CAAN,GACIJ,MAAM,CAACQ,KADX,GAEIJ,CAAC,KAAKP,KAAK,GAAG,CAAd,GACAG,MAAM,CAACS,IADP,GAEAT,MAAM,CAACU,MANN,EAQLP,KAAK,CAACQ,KAAN,CAAYf,KARP;MADwB,CAA1B,CAAP;IAYD;IAED,OAAOO,KAAP;EACD,CAnBA,CADH,CADF,CADF;AA0BD,CA7BD;AA+BAZ,eAAe,CAACqB,WAAhB,GAA8B,kBAA9B;AAEA,IAAMZ,MAAM,GAAGb,UAAU,CAAC0B,MAAX,CAAkB;EAC/BZ,GAAG,EAAE;IACHa,aAAa,EAAE;EADZ,CAD0B;EAI/BP,MAAM,EAAE;IACNQ,WAAW,EAAE5B,UAAU,CAAC6B;EADlB,CAJuB;EAQ/BR,KAAK,EAAE;IACLS,oBAAoB,EAAE,CADjB;IAELC,uBAAuB,EAAE;EAFpB,CARwB;EAa/BR,MAAM,EAAE;IACNS,YAAY,EAAE,CADR;IAENC,eAAe,EAAE;EAFX,CAbuB;EAkB/BX,IAAI,EAAE;IACJW,eAAe,EAAE,CADb;IAEJC,mBAAmB,EAAE,CAFjB;IAGJC,sBAAsB,EAAE;EAHpB;AAlByB,CAAlB,CAAf;AAyBA,eAAe/B,eAAf;AAGA,SAASA,eAAT"},"metadata":{},"sourceType":"module","externalDependencies":[]}