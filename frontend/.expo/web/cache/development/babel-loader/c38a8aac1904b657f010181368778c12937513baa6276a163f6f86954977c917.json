{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"fontVariant\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    _underlineColor = _ref.underlineColor,\n    customOutlineColor = _ref.outlineColor,\n    activeOutlineColor = _ref.activeOutlineColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n    fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _ref4 = StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref4.fontSize,\n    fontWeight = _ref4.fontWeight,\n    fontVariant = _ref4.fontVariant,\n    lineHeight = _ref4.lineHeight,\n    height = _ref4.height,\n    _ref4$backgroundColor = _ref4.backgroundColor,\n    backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n    textAlign = _ref4.textAlign,\n    viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n  if (disabled) {\n    var isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n      type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = _defineProperty(_defineProperty({}, AdornmentSide.Left, leftAffixTopPosition), AdornmentSide.Right, rightAffixTopPosition);\n  var onAffixChange = _defineProperty(_defineProperty({}, AdornmentSide.Left, onLeftAffixLayoutChange), AdornmentSide.Right, onRightAffixLayoutChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: _defineProperty(_defineProperty({}, AdornmentType.Icon, iconTopPosition), AdornmentType.Affix, affixTopPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-outlined'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontVariant: fontVariant,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    activeColor = _ref3.activeColor,\n    outlineColor = _ref3.outlineColor,\n    focused = _ref3.focused,\n    backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"names":["React","View","NativeTextInput","StyleSheet","I18nManager","Platform","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","_ref","_ref$disabled","disabled","_ref$editable","editable","label","_ref$error","error","selectionColor","_underlineColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","_ref$render","render","props","createElement","_ref$multiline","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","_objectWithoutProperties","_excluded","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","_ref4","flatten","fontSizeStyle","fontSize","fontWeight","fontVariant","lineHeight","height","_ref4$backgroundColor","backgroundColor","background","textAlign","viewStyle","_excluded2","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","_ref2","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","_objectSpread","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","_defineProperty","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","Outline","labelContainer","paddingTop","labelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","_ref3","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["C:\\volunteer\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    fontVariant,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                fontVariant,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}