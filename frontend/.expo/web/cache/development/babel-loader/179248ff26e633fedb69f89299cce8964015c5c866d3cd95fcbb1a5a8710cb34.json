{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { screensEnabled } from 'react-native-screens';\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n    var _options$headerStatus = options.headerStatusBarHeight,\n      headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    _ref2$gestureDirectio = _ref2.gestureDirection,\n    gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _callSuper(this, CardStack, [_props]);\n    _defineProperty(_this, \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_this, \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n        height = _ref3.height;\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_this, \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty(_this, \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    var _Dimensions$get = Dimensions.get('window'),\n      _Dimensions$get$heigh = _Dimensions$get.height,\n      _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n      _Dimensions$get$width = _Dimensions$get.width,\n      _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _inherits(CardStack, _React$Component);\n  return _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        mode = _this$props.mode,\n        insets = _this$props.insets,\n        descriptors = _this$props.descriptors,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        getGesturesEnabled = _this$props.getGesturesEnabled,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        headerMode = _this$props.headerMode,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onPageChangeStart = _this$props.onPageChangeStart,\n        onPageChangeConfirm = _this$props.onPageChangeConfirm,\n        onPageChangeCancel = _this$props.onPageChangeCancel,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n        _ref6$top = _ref6.top,\n        top = _ref6$top === void 0 ? insets.top : _ref6$top,\n        _ref6$right = _ref6.right,\n        right = _ref6$right === void 0 ? insets.right : _ref6$right,\n        _ref6$bottom = _ref6.bottom,\n        bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n        _ref6$left = _ref6.left,\n        left = _ref6$left === void 0 ? insets.left : _ref6$left;\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n          detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      var isScreensEnabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: isScreensEnabled,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (shouldUseActivityState || Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n          safeAreaInsets = _ref7.safeAreaInsets,\n          _ref7$headerShown = _ref7.headerShown,\n          headerShown = _ref7$headerShown === void 0 ? true : _ref7$headerShown,\n          headerTransparent = _ref7.headerTransparent,\n          cardShadowEnabled = _ref7.cardShadowEnabled,\n          cardOverlayEnabled = _ref7.cardOverlayEnabled,\n          cardOverlay = _ref7.cardOverlay,\n          cardStyle = _ref7.cardStyle,\n          animationEnabled = _ref7.animationEnabled,\n          gestureResponseDistance = _ref7.gestureResponseDistance,\n          gestureVelocityImpact = _ref7.gestureVelocityImpact,\n          _ref7$gestureDirectio = _ref7.gestureDirection,\n          gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n          _ref7$transitionSpec = _ref7.transitionSpec,\n          transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n          _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n          cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n          _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n          headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n              _animationEnabled = _ref8.animationEnabled,\n              _ref8$gestureDirectio = _ref8.gestureDirection,\n              _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n              _ref8$transitionSpec = _ref8.transitionSpec,\n              _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n              _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n              _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n              _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n              _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n        var _ref9 = safeAreaInsets || {},\n          _ref9$top = _ref9.top,\n          safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n          _ref9$right = _ref9.right,\n          safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n          _ref9$bottom = _ref9.bottom,\n          safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n          _ref9$left = _ref9.left,\n          safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: isScreensEnabled,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref10.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\stack\\lib\\module\\views\\Stack\\CardStack.tsx"],"names":["React","screensEnabled","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","StyleSheet","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","props","state","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","Dimensions","get","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","isScreensEnabled","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}