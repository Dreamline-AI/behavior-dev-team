{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport PortalConsumer from \"./PortalConsumer\";\nimport PortalHost, { PortalContext } from \"./PortalHost\";\nimport { Provider as SettingsProvider, Consumer as SettingsConsumer } from \"../../core/settings\";\nimport { ThemeProvider, withTheme } from \"../../core/theming\";\nvar Portal = function (_React$Component) {\n  _inherits(Portal, _React$Component);\n  function Portal() {\n    _classCallCheck(this, Portal);\n    return _callSuper(this, Portal, arguments);\n  }\n  _createClass(Portal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        children = _this$props.children,\n        theme = _this$props.theme;\n      return React.createElement(SettingsConsumer, null, function (settings) {\n        return React.createElement(PortalContext.Consumer, null, function (manager) {\n          return React.createElement(PortalConsumer, {\n            manager: manager\n          }, React.createElement(SettingsProvider, {\n            value: settings\n          }, React.createElement(ThemeProvider, {\n            theme: theme\n          }, children)));\n        });\n      });\n    }\n  }]);\n  return Portal;\n}(React.Component);\n_defineProperty(Portal, \"Host\", PortalHost);\nexport default withTheme(Portal);","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Portal\\Portal.tsx"],"names":["React","PortalConsumer","PortalHost","PortalContext","Provider","SettingsProvider","Consumer","SettingsConsumer","ThemeProvider","withTheme","Portal","Component","render","children","theme","props","settings","manager"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP,IAAqBC,aAArB;AACA,SACEC,QAAQ,IAAIC,gBADd,EAEEC,QAAQ,IAAIC,gBAFd;AAIA,SAASC,aAAT,EAAwBC,SAAxB;AAAA,IAgCMC,MAAN,aAAA,gBAAA;EAAA,SAAA,CAAA,MAAA,EAAA,gBAAA;EAAA,SAAA,OAAA;IAAA,eAAA,OAAA,MAAA;IAAA,OAAA,UAAA,OAAA,MAAA,EAAA,SAAA;EAAA;EAAA,YAAA,CAAA,MAAA;IAAA,GAAA;IAAA,KAAA,EAIEE,SAAAA,OAAAA,EAAS;MACP,IAAA,WAAA,GAA4B,IAAA,CAAKG,KAAjC;QAAQF,QAAF,GAAA,WAAA,CAAEA,QAAF;QAAYC,KAAAA,GAAAA,WAAAA,CAAAA,KAAAA;MAElB,OACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,IAAA,EACIE,UAAAA,QAAD;QAAA,OACC,KAAA,CAAA,aAAA,CAAC,aAAD,CAAe,QAAf,EAAA,IAAA,EACIC,UAAAA,OAAD;UAAA,OACC,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA;YAAgB,OAAO,EAAEA;UAAzB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA;YAAkB,KAAK,EAAED;UAAzB,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,aAAD,EAAA;YAAe,KAAK,EAAEF;UAAtB,CAAA,EAA8BD,QAA9B,CADF,CADF,CAFJ;QAAA,EAFJ;MAAA,EADF;IAeD;EAAA;EAAA,OAAA,MAAA;AAAA,EAtBkBb,KAAK,CAACW,SAA3B;gBAAMD,M,UAEUR,U;AAuBhB,eAAeO,SAAS,CAACC,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}