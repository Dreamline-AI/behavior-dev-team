{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { getRecoveryPropsToSave } from \"./ErroRecoveryStore\";\nimport ExpoErrorRecovery from \"./ExpoErrorRecovery\";\nif (Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function _callee(error, isFatal) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!ExpoErrorRecovery.saveRecoveryProps) {\n            _context.next = 3;\n            break;\n          }\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave()));\n        case 3:\n          globalHandler(error, isFatal);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  });\n} else if (Platform.OS === 'web' && canUseDOM) {\n  window.addEventListener('error', function () {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"names":["canUseDOM","Platform","getRecoveryPropsToSave","ExpoErrorRecovery","OS","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","_callee","error","isFatal","_regeneratorRuntime","async","_callee$","_context","prev","next","saveRecoveryProps","awrap","stop","Promise","window","addEventListener"],"sources":["C:\\volunteer\\frontend\\node_modules\\expo-error-recovery\\src\\ErrorRecovery.fx.ts"],"sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { Platform } from 'react-native';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && canUseDOM) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,+BAA+B;AAAC,OAAAC,QAAA;AAG1D,SAASC,sBAAsB;AAC/B,OAAOC,iBAAiB;AAExB,IAAIF,QAAQ,CAACG,EAAE,KAAK,KAAK,EAAE;EACzB,IAAMC,aAAa,GAAGC,UAAU,CAACC,gBAAgB,EAAE;EAGnDD,UAAU,CAACE,gBAAgB,CAAC,SAAAC,QAAOC,KAAK,EAAEC,OAAO;IAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,KAC3Cd,iBAAiB,CAACe,iBAAiB;YAAAH,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAO,KAAA,CAC/BhB,iBAAiB,CAACe,iBAAiB,CAAChB,sBAAsB,EAAE,CAAC;QAAA;UAErEG,aAAa,CAACK,KAAK,EAAEC,OAAO,CAAC;QAAC;QAAA;UAAA,OAAAI,QAAA,CAAAK,IAAA;MAAA;IAAA,qBAAAC,OAAA;EAAA,CAC/B,CAAC;CACH,MAAM,IAAIpB,QAAQ,CAACG,EAAE,KAAK,KAAK,IAAIJ,SAAS,EAAE;EAC7CsB,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAK;IACpCpB,iBAAiB,CAACe,iBAAiB,CAAChB,sBAAsB,EAAE,CAAC;EAC/D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}