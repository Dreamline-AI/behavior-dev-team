{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\nvar MenuItem = function MenuItem(_ref) {\n  var icon = _ref.icon,\n    title = _ref.title,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    style = _ref.style,\n    contentStyle = _ref.contentStyle,\n    testID = _ref.testID,\n    titleStyle = _ref.titleStyle,\n    accessibilityLabel = _ref.accessibilityLabel,\n    theme = _ref.theme;\n  var disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  var titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n  var iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"menuitem\",\n    accessibilityState: {\n      disabled: disabled\n    }\n  }, React.createElement(View, {\n    style: styles.row\n  }, icon ? React.createElement(View, {\n    style: [styles.item, styles.icon],\n    pointerEvents: \"box-none\"\n  }, React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: iconColor\n  })) : null, React.createElement(View, {\n    style: [styles.item, styles.content, icon ? styles.widthWithIcon : null, contentStyle],\n    pointerEvents: \"none\"\n  }, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.title, {\n      color: titleColor\n    }, titleStyle]\n  }, title))));\n};\nMenuItem.displayName = 'Menu.Item';\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Menu\\MenuItem.tsx"],"names":["color","React","Icon","TouchableRipple","Text","black","white","withTheme","MenuItem","icon","title","disabled","onPress","style","contentStyle","testID","titleStyle","accessibilityLabel","theme","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","displayName","minWidth","maxWidth","iconWidth","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\nexport type Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n  theme,\n}: Props) => {\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}