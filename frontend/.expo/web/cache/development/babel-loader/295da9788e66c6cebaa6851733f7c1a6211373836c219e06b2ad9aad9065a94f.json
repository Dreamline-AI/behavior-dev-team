{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@expo/vector-icons/build/createIconSet.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport * as Font from \"expo-font\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n  var font = _defineProperty({}, fontName, expoAssetId);\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = function (_React$Component) {\n    _inherits(Icon, _React$Component);\n    function Icon() {\n      var _this;\n      _classCallCheck(this, Icon);\n      _this = _callSuper(this, Icon, arguments);\n      _this._mounted = false;\n      _this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n      return _this;\n    }\n    _createClass(Icon, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        return _regeneratorRuntime.async(function componentDidMount$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this._mounted = true;\n              if (this.state.fontIsLoaded) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Font.loadAsync(font));\n            case 4:\n              this._mounted && this.setState({\n                fontIsLoaded: true\n              });\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, null, this, null, Promise);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._mounted = false;\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(props) {\n        if (this._icon) {\n          this._icon.setNativeProps(props);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n          console.warn(\"\\\"\" + this.props.name + \"\\\" is not a valid icon name for family \\\"\" + fontName + \"\\\"\");\n        }\n        if (!this.state.fontIsLoaded) {\n          return React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 28\n            }\n          });\n        }\n        return React.createElement(RNVIconComponent, _extends({\n          ref: function ref(view) {\n            _this2._icon = view;\n          }\n        }, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }\n        }));\n      }\n    }]);\n    return Icon;\n  }(React.Component), _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = function () {\n    return glyphMap;\n  }, _a.getFontFamily = function () {\n    return fontName;\n  }, _a.loadFont = function () {\n    return Font.loadAsync(font);\n  }, _a.font = font, _a;\n}","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@expo/vector-icons/src/createIconSet.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,IAAI,MAAM,WAAW;AACjC,OAAO,KAAyB,MAAM,OAAO;AAAC,OAAA,IAAA;AAW9C,OAAO,aAAa;AACpB,OAAO,yBAAyB;AAEhC,SACE,kBAAkB,EAClB,iBAAiB;AAqFnB,eAAc,UACZ,QAAqB,EACrB,QAAY,EACZ,WAAW,EACX,SAAe,EAAA;;EAEf,IAAM,IAAI,GAAA,eAAA,KAAM,QAAQ,EAAG,WAAW,CAAE;EACxC,IAAM,gBAAgB,GAAG,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC;EAE3E,OAAA,EAAA,aAAA,gBAAA;IAAA,SAAA,CAAA,IAAA,EAAA,gBAAA;IAAO,SAAA,KAAA,EAAA;MAAA,IAAA,KAAA;MAAA,eAAA,OAAA,IAAA;;MASL,KAAA,CAAA,QAAQ,GAAG,KAAK;MAGhB,KAAA,CAAA,KAAK,GAAG;QACN,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ;OACrC;MAAC,OAAA,KAAA;IAwCJ;IAAC,YAAA,CAAA,IAAA;MAAA,GAAA;MAAA,KAAA,EAtCC,SAAA,kBAAA;QAAA,OAAA,mBAAA,CAAA,KAAA,UAAA,mBAAA,QAAA;UAAA,kBAAA,QAAA,CAAA,IAAA,GAAA,QAAA,CAAA,IAAA;YAAA;cACE,IAAI,CAAC,QAAQ,GAAG,IAAI;cAAC,IAChB,IAAI,CAAC,KAAK,CAAC,YAAY;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,QAAA,CAAA,IAAA;cAAA,OAAA,mBAAA,CAAA,KAAA,CACpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAAA;cAC1B,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;gBAAE,YAAY,EAAE;cAAI,CAAE,CAAC;YAAC;YAAA;cAAA,OAAA,QAAA,CAAA,IAAA;UAAA;QAAA,qBAAA,OAAA;MAAA;IAE1D;MAAA,GAAA;MAAA,KAAA,EAED,SAAA,qBAAA,EAAoB;QAClB,IAAI,CAAC,QAAQ,GAAG,KAAK;MACvB;IAAC;MAAA,GAAA;MAAA,KAAA,EAED,SAAA,eAAe,KAAK,EAAA;QAClB,IAAI,IAAI,CAAC,KAAK,EAAE;UACd,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;QACjC;MACH;IAAC;MAAA,GAAA;MAAA,KAAA,EAED,SAAA,OAAA,EAAM;QAAA,IAAA,MAAA;QACJ,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,QAAQ,CAAC,EAAE;UAChE,OAAO,CAAC,IAAI,QACN,IAAI,CAAC,KAAK,CAAC,IAAI,iDAA0C,QAAQ,OAAG,CACzE;QACF;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;UAC5B,OAAO,KAAA,CAAA,aAAA,CAAC,IAAI;YAAA,MAAA;YAAA,QAAA;cAAA,QAAA,EAAA,YAAA;cAAA,UAAA;cAAA,YAAA;YAAA;UAAA,CAAC,CAAE;QAChB;QAED,OACE,KAAA,CAAA,aAAA,CAAC,gBAAgB,EAAA,QAAA;UACf,GAAG,EAAE,SAAA,IAAC,IAAI,EAAI;YACZ,MAAI,CAAC,KAAK,GAAG,IAAI;UACnB;QAAE,GACE,IAAI,CAAC,KAAK;UAAA,MAAA;UAAA,QAAA;YAAA,QAAA,EAAA,YAAA;YAAA,UAAA;YAAA,YAAA;UAAA;QAAA,EAAC,CACf;MAEN;IAAC;IAAA,OAAA,IAAA;EAAA,EArDuB,KAAK,CAAC,SAAuB,CAsDtD,EArDQ,EAAA,CAAA,YAAY,GAAG,gBAAgB,CAAC,YAAa,EAC7C,EAAA,CAAA,MAAM,GAAG,yBAAyB,CAAC,EAAI,CAAE,EACzC,EAAA,CAAA,QAAQ,GAAG,QAAS,EACpB,EAAA,CAAA,cAAc,GAAG;IAAA,OAAM,QAAS;EAAA,GAChC,EAAA,CAAA,aAAa,GAAG;IAAA,OAAM,QAAS;EAAA,GAC/B,EAAA,CAAA,QAAQ,GAAG;IAAA,OAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE;EAAA,GACtC,EAAA,CAAA,IAAI,GAAG,IAAK,E,EA+CnB;AACJ","sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport {\n  Text,\n  TextProps,\n  TouchableHighlightProps,\n  ViewProps,\n  OpaqueColorValue,\n  TextStyle,\n  ViewStyle,\n} from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   */\n  color?: string | OpaqueColorValue;\n}\n\nexport interface IconButtonProps<GLYPHS extends string>\n  extends IconProps<GLYPHS>,\n    ViewProps,\n    TouchableHighlightProps {\n  /**\n   * Text and icon color\n   * Use iconStyle or nest a Text component if you need different colors.\n   * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n   *\n   *  @default 'white'\n   */\n  color?: string | OpaqueColorValue;\n\n  /**\n   * Border radius of the button\n   * Set to 0 to disable.\n   *\n   * @default 5\n   */\n  borderRadius?: number;\n\n  /**\n   * Styles applied to the icon only\n   * Good for setting margins or a different color.\n   *\n   * @default {marginRight: 10}\n   */\n  iconStyle?: TextStyle;\n\n  /**\n   * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n   * Only exist here so we can have ViewStyle or TextStyle\n   *\n   */\n  style?: ViewStyle | TextStyle;\n\n  /**\n   * Background color of the button. Can be a string or OpaqueColorValue (returned from\n   * PlatformColor(..))\n   *\n   * @default '#007AFF'\n   */\n  backgroundColor?: string | OpaqueColorValue;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number | string };\n\nexport interface Icon<G extends string, FN extends string> {\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function <G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (__DEV__ && this.props.name && !(this.props.name in glyphMap)) {\n        console.warn(\n          `\"${this.props.name}\" is not a valid icon name for family \"${fontName}\"`\n        );\n      }\n\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={(view) => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}