{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { nanoid } from 'nanoid/non-secure';\nvar BaseRouter = {\n  getStateForAction: function getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          var index = action.source ? state.routes.findIndex(function (r) {\n            return r.key === action.source;\n          }) : state.index;\n          if (index === -1) {\n            return null;\n          }\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map(function (r, i) {\n              return i === index ? _objectSpread(_objectSpread({}, r), {}, {\n                params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n              }) : r;\n            })\n          });\n        }\n      case 'RESET':\n        {\n          var nextState = action.payload;\n          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {\n            return !state.routeNames.includes(route.name);\n          })) {\n            return null;\n          }\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {\n              return !state.routeNames.includes(name);\n            })) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(function (route) {\n                return route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                  key: \"\".concat(route.name, \"-\").concat(nanoid())\n                });\n              })\n            });\n          }\n          return nextState;\n        }\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\routers\\lib\\module\\BaseRouter.tsx"],"names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAWA,IAAMC,UAAU,GAAG;EACjBC,iBAAiB,WAAA,kBACfC,KADe,EAEfC,MAFe,EAGqB;IACpC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,YAAL;QAAmB;UACjB,IAAMC,KAAK,GAAGF,MAAM,CAACG,MAAPH,GACVD,KAAK,CAACK,MAANL,CAAaM,SAAbN,CAAwBO,UAAAA,CAAD;YAAA,OAAOA,CAAC,CAACC,GAAFD,KAAUN,MAAM,CAACG,MAA/CJ;UAAAA,EADUC,GAEVD,KAAK,CAACG,KAFV;UAIA,IAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;YAChB,OAAO,IAAP;UACD;UAED,OAAA,aAAA,CAAA,aAAA,KACKH,KADE;YAELK,MAAM,EAAE,KAAK,CAACA,MAAN,CAAaI,GAAb,CAAiB,UAACF,CAAD,EAAIG,CAAJ;cAAA,OACvB,CAAC,KAAKP,KAAN,GAAA,aAAA,CAAA,aAAA,KACSI,CAAL;gBAAQI,MAAM,EAAA,aAAA,CAAA,aAAA,KAAOJ,CAAC,CAACI,MAAP,GAAkBV,MAAM,CAACW,OAAPX,CAAeU,MAAAA;cAAjC,KAChBJ,CAHE;YAAA;UAAA;QAMX;MAED,KAAK,OAAL;QAAc;UACZ,IAAMM,SAAS,GAAGZ,MAAM,CAACW,OAAzB;UAEA,IACEC,SAAS,CAACR,MAAVQ,CAAiBC,MAAjBD,KAA4B,CAA5BA,IACAA,SAAS,CAACR,MAAVQ,CAAiBE,IAAjBF,CACGG,UAAAA,KAAD;YAAA,OAA6B,CAAChB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BgB,KAAK,CAACG,IAAhCnB,CADhCa;UAAAA,EAFF,EAKE;YACA,OAAO,IAAP;UACD;UAED,IAAIA,SAAS,CAACO,KAAVP,KAAoB,KAAxB,EAA+B;YAC7B,IACEb,KAAK,CAACiB,UAANjB,CAAiBc,MAAjBd,KAA4Ba,SAAS,CAACI,UAAVJ,CAAqBC,MAAjDd,IACAa,SAAS,CAACI,UAAVJ,CAAqBE,IAArBF,CACGM,UAAAA,IAAD;cAAA,OAAU,CAACnB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BmB,IAA1BnB,CADba;YAAAA,EAFF,EAKE;cACA,OAAO,IAAP;YACD;YAED,OAAA,aAAA,CAAA,aAAA,KACKA,SADE;cAELR,MAAM,EAAE,SAAS,CAACA,MAAV,CAAiBI,GAAjB,CAAsBO,UAAAA,KAAD;gBAAA,OAC3BA,KAAK,CAACR,GAANQ,GAAYA,KAAZA,GAAAA,aAAAA,CAAAA,aAAAA,KAAyBA,KAAL;kBAAYR,GAAG,EAAA,EAAA,CAAA,MAAA,CAAKQ,KAAK,CAACG,IAAX,EAAA,GAAA,CAAA,CAAA,MAAA,CAAmBtB,MAAM,CAAA,CAAzB;gBAAA,EAD7B;cAAA;YAAA;UAIX;UAED,OAAOgB,SAAP;QACD;MAED;QACE,OAAO,IAAP;IAtDJ;EAwDD,CA7DgB;EA+DjBQ,uBAAuB,WAAA,wBAACpB,MAAD,EAAiC;IACtD,OAAOA,MAAM,CAACC,IAAPD,KAAgB,UAAvB;EACD;AAjEgB,CAAnB;AAoEA,eAAeH,UAAf","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}