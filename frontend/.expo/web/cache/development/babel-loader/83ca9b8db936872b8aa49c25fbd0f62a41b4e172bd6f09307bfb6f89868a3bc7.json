{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"D:\\\\Community Dreams frontend\\\\frontend\\\\src\\\\components\\\\Quiz.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport axios from 'axios';\nimport Button from \"../components/Button\";\nimport * as Progress from 'react-native-progress';\nimport IncorrectQuiz from \"./IncorrectQuiz\";\nvar Quiz = function Quiz(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestionIndex = _useState4[0],\n    setCurrentQuestionIndex = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isCorrect = _useState6[0],\n    setIsCorrect = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    selectedOption = _useState8[0],\n    setSelectedOption = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    quizProgress = _useState10[0],\n    setQuizProgress = _useState10[1];\n  var translateY = useRef(new Animated.Value(0)).current;\n  var fadeAnim = useRef(new Animated.Value(1)).current;\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    showMessage = _useState12[0],\n    setShowMessage = _useState12[1];\n  var _useState13 = useState(\"\"),\n    _useState14 = _slicedToArray(_useState13, 2),\n    customMessage = _useState14[0],\n    setCustomMessage = _useState14[1];\n  var _useState15 = useState([]),\n    _useState16 = _slicedToArray(_useState15, 2),\n    incorrectIndices = _useState16[0],\n    setIncorrectIndices = _useState16[1];\n  var _useState17 = useState([]),\n    _useState18 = _slicedToArray(_useState17, 2),\n    incorrectQuestions = _useState18[0],\n    setIncorrectQuestions = _useState18[1];\n  var _useState19 = useState(true),\n    _useState20 = _slicedToArray(_useState19, 2),\n    loading = _useState20[0],\n    setLoading = _useState20[1];\n  useEffect(function () {\n    if (route && route.params && route.params.incorrectIndices) {\n      var _incorrectIndices = route.params.incorrectIndices;\n      setIncorrectQuestions(data.filter(function (_, index) {\n        return _incorrectIndices.includes(index);\n      }));\n    }\n  }, [route, data]);\n  useEffect(function () {\n    if (selectedOption !== null) {\n      fadeOut();\n    }\n  }, [selectedOption]);\n  useEffect(function () {\n    fetchData();\n  }, []);\n  var fetchData = function fetchData() {\n    var response, fetchedData;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.get('http://localhost:8080/api/questions?triviaId=1'));\n        case 3:\n          response = _context.sent;\n          fetchedData = response.data.questions;\n          setData(fetchedData);\n          setQuizProgress(fetchedData.length);\n          setLoading(false);\n          _context.next = 14;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('Error fetching data:', _context.t0);\n          setLoading(false);\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n  var progress = (currentQuestionIndex + 1) / quizProgress;\n  var handleNext = function handleNext() {\n    if (currentQuestionIndex === data.length - 1) {\n      if (incorrectIndices.length > 0) {\n        navigation.navigate('RedoQuestionsScreen', {\n          incorrectIndices: incorrectIndices,\n          progress: progress\n        });\n      } else {\n        navigation.navigate('QuizEndingScreen');\n      }\n    } else {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setSelectedOption(null);\n      setIsCorrect(null);\n      fadeAnim.setValue(1);\n      translateY.setValue(0);\n      setShowMessage(false);\n      setCustomMessage(\" \");\n    }\n  };\n  var fadeOut = function fadeOut() {\n    Animated.parallel([Animated.timing(fadeAnim, {\n      toValue: 0,\n      duration: 200,\n      useNativeDriver: true\n    })]).start(function () {\n      return setShowMessage(true);\n    });\n  };\n  var moveCardUp = function moveCardUp(selectedOption) {\n    var currentQuestion = data[currentQuestionIndex];\n    var correctOption = currentQuestion.options[0];\n    var toValue = selectedOption === correctOption ? -80 : -280;\n    Animated.parallel([Animated.timing(translateY, {\n      toValue: toValue,\n      duration: 600,\n      useNativeDriver: true\n    })]).start();\n  };\n  var handlePressedOption = function handlePressedOption(pressedOption) {\n    var currentQuestion = data[currentQuestionIndex];\n    var isAnswerCorrect = currentQuestion.correct_option === pressedOption;\n    setIsCorrect(isAnswerCorrect);\n    setSelectedOption(pressedOption);\n    moveCardUp(pressedOption);\n    fadeOut();\n    if (!isAnswerCorrect) {\n      setIncorrectIndices([].concat(_toConsumableArray(incorrectIndices), [currentQuestionIndex]));\n      console.log(\"Incorrect Indices:\", incorrectIndices);\n      setCustomMessage(currentQuestion.wrong_message);\n    } else {\n      setCustomMessage(currentQuestion.correct_message);\n    }\n  };\n  if (loading) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }\n    }));\n  }\n  if (incorrectQuestions.length > 0) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 13\n      }\n    }, React.createElement(IncorrectQuiz, {\n      incorrectQuestions: incorrectQuestions,\n      navigation: navigation,\n      handleNext: handleNext,\n      handlePressedOption: handlePressedOption,\n      selectedOption: selectedOption,\n      isCorrect: isCorrect,\n      setIsCorrect: setIsCorrect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }\n    }));\n  }\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.progressBarContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 13\n    }\n  }, React.createElement(Progress.Bar, {\n    progress: progress,\n    width: 350,\n    color: \"black\",\n    unfilledColor: \"rgba(217, 217, 217, 1)\",\n    borderWidth: 0,\n    height: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }\n  })), React.createElement(Animated.View, {\n    style: [{\n      opacity: selectedOption !== null ? fadeAnim : 1\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.question,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 17\n    }\n  }, data[currentQuestionIndex].question)), data[currentQuestionIndex].options.map(function (option) {\n    return React.createElement(Animated.View, {\n      key: option,\n      style: [{\n        opacity: selectedOption !== option ? fadeAnim : 1,\n        transform: selectedOption === option ? [{\n          translateY: translateY\n        }] : null\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: isCorrect ? styles.correctMessage : styles.wrongMessage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }\n    }, isCorrect !== null ? isCorrect ? \"Correct! \" : \"No\" : \"\"), React.createElement(Pressable, {\n      style: [styles.AnswerBox, selectedOption === option && (isCorrect ? styles.correctBox : styles.wrongBox)],\n      onPress: function onPress() {\n        return handlePressedOption(option);\n      },\n      disabled: selectedOption,\n      key: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.answerText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 25\n      }\n    }, option)));\n  }), React.createElement(Text, {\n    style: styles.customMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }\n  }, customMessage), React.createElement(Button, {\n    color: \"black\",\n    mode: \"contained\",\n    onPress: handleNext,\n    disabled: !selectedOption,\n    style: !selectedOption ? styles.disabledButton : null,\n    labelStyle: !selectedOption ? styles.disabledButtonText : null,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }\n  }, \"Continue\"));\n};\nexport default Quiz;\nvar styles = StyleSheet.create({\n  AnswerBox: {\n    width: 361,\n    height: 214,\n    borderWidth: 3,\n    borderRadius: 6,\n    borderColor: 'rgba(0, 0, 0, 0.05)',\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  answerText: {\n    textAlign: 'center',\n    fontSize: 24\n  },\n  question: {\n    marginBottom: 10,\n    fontSize: 18\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  correctBox: {\n    borderColor: 'rgba(19, 212, 2, 1)'\n  },\n  wrongBox: {\n    borderColor: 'rgba(241, 58, 0, 1)'\n  },\n  progressBarContainer: {\n    width: '100%',\n    height: 20,\n    marginBottom: 30\n  },\n  correctMessage: {\n    color: 'rgba(98, 218, 103, 1)',\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 30\n  },\n  wrongMessage: {\n    color: 'rgba(255, 72, 15, 1)',\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 20\n  },\n  customMessage: {\n    color: 'black',\n    fontSize: 16,\n    position: 'absolute',\n    top: 390,\n    width: '100%',\n    textAlign: 'left'\n  },\n  disabledButton: {\n    backgroundColor: 'black'\n  },\n  disabledButtonText: {\n    color: 'white'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","useRef","Text","View","StyleSheet","Animated","Pressable","ActivityIndicator","axios","Button","Progress","IncorrectQuiz","Quiz","_ref","navigation","route","_useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","currentQuestionIndex","setCurrentQuestionIndex","_useState5","_useState6","isCorrect","setIsCorrect","_useState7","_useState8","selectedOption","setSelectedOption","_useState9","_useState10","quizProgress","setQuizProgress","translateY","Value","current","fadeAnim","_useState11","_useState12","showMessage","setShowMessage","_useState13","_useState14","customMessage","setCustomMessage","_useState15","_useState16","incorrectIndices","setIncorrectIndices","_useState17","_useState18","incorrectQuestions","setIncorrectQuestions","_useState19","_useState20","loading","setLoading","params","filter","_","index","includes","fadeOut","fetchData","response","fetchedData","_regeneratorRuntime","async","fetchData$","_context","prev","next","awrap","get","sent","questions","length","t0","console","error","stop","Promise","progress","handleNext","navigate","setValue","parallel","timing","toValue","duration","useNativeDriver","start","moveCardUp","currentQuestion","correctOption","options","handlePressedOption","pressedOption","isAnswerCorrect","correct_option","concat","_toConsumableArray","log","wrong_message","correct_message","createElement","style","styles","container","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","size","color","progressBarContainer","Bar","width","unfilledColor","borderWidth","height","opacity","question","map","option","key","transform","correctMessage","wrongMessage","AnswerBox","correctBox","wrongBox","onPress","disabled","answerText","mode","disabledButton","labelStyle","disabledButtonText","create","borderRadius","borderColor","backgroundColor","alignItems","justifyContent","textAlign","fontSize","marginBottom","flex","position","top"],"sources":["D:/Community Dreams frontend/frontend/src/components/Quiz.js"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import { Text, View, StyleSheet, Animated, Pressable } from \"react-native\";\r\n// import data from \"../helpers/data\";\r\n// import Button from '../components/Button';\r\n// import * as Progress from 'react-native-progress';\r\n// import IncorrectQuiz from './IncorrectQuiz';\r\n\r\n// const Quiz = ({ navigation, route }) => {\r\n//     const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n//     const [isCorrect, setIsCorrect] = useState(null);\r\n//     const [selectedOption, setSelectedOption] = useState(null);\r\n//     const [quizProgress, setQuizProgress] = useState(data.length);\r\n//     const translateY = useRef(new Animated.Value(0)).current;\r\n//     const fadeAnim = useRef(new Animated.Value(1)).current;\r\n//     const [showMessage, setShowMessage] = useState(false);\r\n//     const [customMessage, setCustomMessage] = useState(\"\");\r\n//     const [incorrectIndices, setIncorrectIndices] = useState([]);\r\n//     const [incorrectQuestions, setIncorrectQuestions] = useState([]); \r\n\r\n\r\n\r\n//     useEffect(() => {\r\n//         if (route && route.params && route.params.incorrectIndices) {\r\n//             const { incorrectIndices } = route.params;\r\n//             setIncorrectQuestions(data.filter((_, index) => incorrectIndices.includes(index))); \r\n//         }\r\n//     }, [route]);\r\n\r\n//     useEffect(() => {\r\n//         if (selectedOption !== null) {\r\n//             fadeOut();\r\n//         }\r\n//     }, [selectedOption]);\r\n\r\n//     const progress = (currentQuestionIndex + 1) / quizProgress;\r\n\r\n//     const handleNext = () => {\r\n//         if (currentQuestionIndex === data.length - 1) {\r\n//             if (incorrectIndices.length > 0) {\r\n//                 navigation.navigate('RedoQuestionsScreen', { incorrectIndices: incorrectIndices, progress:progress });\r\n//             } else {\r\n//                 navigation.navigate('QuizEndingScreen');\r\n//             }\r\n//         } else {\r\n//             setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n//             setSelectedOption(null);\r\n//             setIsCorrect(null);\r\n//             fadeAnim.setValue(1);\r\n//             translateY.setValue(0);\r\n//             setShowMessage(false);\r\n//             setCustomMessage(\"\"); \r\n//         }\r\n//     };\r\n\r\n//     const fadeOut = () => {\r\n//         Animated.parallel([\r\n//             Animated.timing(fadeAnim, {\r\n//                 toValue: 0,\r\n//                 duration: 200,\r\n//                 useNativeDriver: true,\r\n//             })\r\n//         ]).start(() => setShowMessage(true));\r\n//     };\r\n\r\n//     const moveCardUp = (selectedOption) => {\r\n//         const currentQuestion = data[currentQuestionIndex];\r\n//         const correctOption = currentQuestion.options[0];\r\n//         let toValue = selectedOption === correctOption ? -80 : -280;\r\n\r\n//         Animated.parallel([\r\n//             Animated.timing(translateY, {\r\n//                 toValue: toValue,\r\n//                 duration: 600,\r\n//                 useNativeDriver: true,\r\n//             }),\r\n//         ]).start();\r\n//     };\r\n\r\n//     const handlePressedOption = (pressedOption) => {\r\n//         const currentQuestion = data[currentQuestionIndex];\r\n//         const isAnswerCorrect = currentQuestion.correct_option === pressedOption;\r\n//         setIsCorrect(isAnswerCorrect);\r\n//         setSelectedOption(pressedOption);\r\n//         moveCardUp(pressedOption);\r\n//         fadeOut();\r\n    \r\n//         if (!isAnswerCorrect) {\r\n//             setIncorrectIndices([...incorrectIndices, currentQuestionIndex]); \r\n//             console.log(\"Incorrect Indices:\", incorrectIndices); \r\n//             setCustomMessage(currentQuestion.wrong_message);\r\n//         } else {\r\n//             setCustomMessage(currentQuestion.correct_message);\r\n//         }\r\n//     };\r\n    \r\n//     if (incorrectQuestions.length > 0) {\r\n//         return (\r\n//             <View style={styles.container}>\r\n//                 <IncorrectQuiz\r\n//                     incorrectQuestions={incorrectQuestions}\r\n//                     navigation={navigation} \r\n//                     handleNext={handleNext}\r\n//                     handlePressedOption={handlePressedOption}\r\n//                     selectedOption={selectedOption}\r\n//                     isCorrect={isCorrect}\r\n//                     setIsCorrect={setIsCorrect}\r\n//                 />\r\n//             </View>\r\n//         );\r\n//     }\r\n\r\n//     return (\r\n//         <View style={styles.container}>\r\n\r\n//             <View style={styles.progressBarContainer}>\r\n//                 <Progress.Bar progress={progress} width={350} color='black' unfilledColor='rgba(217, 217, 217, 1)' borderWidth={0} height={8} />\r\n//             </View>\r\n\r\n//             <Animated.View\r\n//                 style={[{ opacity: selectedOption !== null ? fadeAnim : 1 },]}\r\n//             >\r\n//                 <Text style={styles.question}>{data[currentQuestionIndex].question}</Text>\r\n//             </Animated.View>\r\n\r\n//             {data[currentQuestionIndex].options.map((option) => (\r\n//                 <Animated.View\r\n//                     key={option}\r\n//                     style={[\r\n//                         {\r\n//                             opacity: selectedOption !== option ? fadeAnim : 1,\r\n//                             transform: selectedOption === option ? [{ translateY: translateY }] : null,\r\n//                         },\r\n//                     ]}\r\n//                 >\r\n//                     <Text style={isCorrect ? styles.correctMessage : styles.wrongMessage}>\r\n//                         {isCorrect !== null ? (isCorrect ? \"Correct! \" : \"No\") : \"\"}\r\n//                     </Text>\r\n//                     <Pressable\r\n//                         style={[\r\n//                             styles.AnswerBox,\r\n//                             selectedOption === option && (isCorrect ? styles.correctBox : styles.wrongBox),\r\n//                         ]}\r\n//                         onPress={() => handlePressedOption(option)}\r\n//                         disabled={selectedOption}\r\n//                         key={option}\r\n\r\n//                     >\r\n//                         <Text style={styles.answerText}>{option}</Text>\r\n\r\n//                     </Pressable>\r\n\r\n//                 </Animated.View>\r\n\r\n//             ))}\r\n\r\n//             <Text style={styles.customMessage}>{customMessage}</Text>\r\n\r\n//             <Button\r\n//                 color=\"black\"\r\n//                 mode=\"contained\"\r\n//                 onPress={handleNext}\r\n//                 disabled={!selectedOption} \r\n//                 style={!selectedOption ? styles.disabledButton : null} \r\n//                 labelStyle={!selectedOption ? styles.disabledButtonText : null} \r\n//             >\r\n//                 Continue\r\n//             </Button>\r\n//         </View>\r\n//     );\r\n// }\r\n\r\n// export default Quiz;\r\n\r\n// const styles = StyleSheet.create({\r\n//     AnswerBox: {\r\n//         width: 361,\r\n//         height: 214,\r\n//         borderWidth: 3,\r\n//         borderRadius: 6,\r\n//         borderColor: 'rgba(0, 0, 0, 0.05)',\r\n//         backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center', \r\n//     },\r\n\r\n//     answerText: {\r\n//         textAlign: 'center',\r\n//         fontSize: 24,\r\n//     },\r\n//     question: {\r\n//         marginBottom: 10,\r\n//         fontSize: 18,\r\n//     },\r\n//     container: {\r\n//         flex: 1,\r\n//         alignItems: 'center',\r\n//         justifyContent: 'center',\r\n//     },\r\n//     correctBox: {\r\n//         borderColor: 'rgba(19, 212, 2, 1)',\r\n//     },\r\n//     wrongBox: {\r\n//         borderColor: 'rgba(241, 58, 0, 1)',\r\n//     },\r\n//     progressBarContainer: {\r\n//         width: '100%',\r\n//         height: 20,\r\n//         marginBottom: 30,\r\n//     },\r\n\r\n//     correctMessage: {\r\n//         color: 'rgba(98, 218, 103, 1)',\r\n//         fontSize: 24,\r\n//         textAlign: 'center',\r\n//         marginBottom: 30,\r\n//     },\r\n//     wrongMessage: {\r\n//         color: 'rgba(255, 72, 15, 1)',\r\n//         fontSize: 24,\r\n//         textAlign: 'center',\r\n//         marginBottom: 20,\r\n//     },\r\n//     customMessage: {\r\n//         color: 'black',\r\n//         fontSize: 16,\r\n//         position: 'absolute',\r\n//         top: 390, \r\n//         width: '100%',\r\n//         textAlign: 'left', \r\n\r\n//     },\r\n//     disabledButton: {\r\n//         backgroundColor: 'black',\r\n//     },\r\n//     disabledButtonText: {\r\n//         color: 'white', \r\n//     },\r\n// });\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { Text, View, StyleSheet, Animated, Pressable, ActivityIndicator } from \"react-native\";\r\nimport axios from 'axios';\r\nimport Button from '../components/Button';\r\nimport * as Progress from 'react-native-progress';\r\nimport IncorrectQuiz from './IncorrectQuiz';\r\n\r\nconst Quiz = ({ navigation, route }) => {\r\n    const [data, setData] = useState([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [isCorrect, setIsCorrect] = useState(null);\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [quizProgress, setQuizProgress] = useState(0);\r\n    const translateY = useRef(new Animated.Value(0)).current;\r\n    const fadeAnim = useRef(new Animated.Value(1)).current;\r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [customMessage, setCustomMessage] = useState(\"\");\r\n    const [incorrectIndices, setIncorrectIndices] = useState([]);\r\n    const [incorrectQuestions, setIncorrectQuestions] = useState([]); \r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (route && route.params && route.params.incorrectIndices) {\r\n            const { incorrectIndices } = route.params;\r\n            setIncorrectQuestions(data.filter((_, index) => incorrectIndices.includes(index))); \r\n        }\r\n    }, [route, data]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption !== null) {\r\n            fadeOut();\r\n        }\r\n    }, [selectedOption]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8080/api/questions?triviaId=1');\r\n            const fetchedData = response.data.questions; // Assuming response structure contains questions array\r\n            setData(fetchedData);\r\n            setQuizProgress(fetchedData.length);\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const progress = (currentQuestionIndex + 1) / quizProgress;\r\n\r\n    const handleNext = () => {\r\n        if (currentQuestionIndex === data.length - 1) {\r\n            if (incorrectIndices.length > 0) {\r\n                navigation.navigate('RedoQuestionsScreen', { incorrectIndices: incorrectIndices, progress: progress });\r\n            } else {\r\n                navigation.navigate('QuizEndingScreen');\r\n            }\r\n        } else {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n            setSelectedOption(null);\r\n            setIsCorrect(null);\r\n            fadeAnim.setValue(1);\r\n            translateY.setValue(0); \r\n            setShowMessage(false);\r\n            setCustomMessage(\" \"); \r\n        }\r\n    };\r\n\r\n    const fadeOut = () => {\r\n        Animated.parallel([\r\n            Animated.timing(fadeAnim, {\r\n                toValue: 0,\r\n                duration: 200,\r\n                useNativeDriver: true,\r\n            })\r\n        ]).start(() => setShowMessage(true));\r\n    };\r\n\r\n    const moveCardUp = (selectedOption) => {\r\n        const currentQuestion = data[currentQuestionIndex];\r\n        const correctOption = currentQuestion.options[0];\r\n        let toValue = selectedOption === correctOption ? -80 : -280;\r\n\r\n        Animated.parallel([\r\n            Animated.timing(translateY, {\r\n                toValue: toValue,\r\n                duration: 600,\r\n                useNativeDriver: true,\r\n            }),\r\n        ]).start();\r\n    };\r\n\r\n    const handlePressedOption = (pressedOption) => {\r\n        const currentQuestion = data[currentQuestionIndex];\r\n        const isAnswerCorrect = currentQuestion.correct_option === pressedOption;\r\n        setIsCorrect(isAnswerCorrect);\r\n        setSelectedOption(pressedOption);\r\n        moveCardUp(pressedOption);\r\n        fadeOut();\r\n    \r\n        if (!isAnswerCorrect) {\r\n            setIncorrectIndices([...incorrectIndices, currentQuestionIndex]); \r\n            console.log(\"Incorrect Indices:\", incorrectIndices); \r\n            setCustomMessage(currentQuestion.wrong_message);\r\n        } else {\r\n            setCustomMessage(currentQuestion.correct_message);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <View style={styles.container}>\r\n                <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n            </View>\r\n        );\r\n    }\r\n\r\n    if (incorrectQuestions.length > 0) {\r\n        return (\r\n            <View style={styles.container}>\r\n                <IncorrectQuiz\r\n                    incorrectQuestions={incorrectQuestions}\r\n                    navigation={navigation} \r\n                    handleNext={handleNext}\r\n                    handlePressedOption={handlePressedOption}\r\n                    selectedOption={selectedOption}\r\n                    isCorrect={isCorrect}\r\n                    setIsCorrect={setIsCorrect}\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n\r\n            <View style={styles.progressBarContainer}>\r\n                <Progress.Bar progress={progress} width={350} color='black' unfilledColor='rgba(217, 217, 217, 1)' borderWidth={0} height={8} />\r\n            </View>\r\n\r\n            <Animated.View\r\n                style={[{ opacity: selectedOption !== null ? fadeAnim : 1 },]}\r\n            >\r\n                <Text style={styles.question}>{data[currentQuestionIndex].question}</Text>\r\n            </Animated.View>\r\n\r\n            {data[currentQuestionIndex].options.map((option) => (\r\n                <Animated.View\r\n                    key={option}\r\n                    style={[\r\n                        {\r\n                            opacity: selectedOption !== option ? fadeAnim : 1,\r\n                            transform: selectedOption === option ? [{ translateY: translateY }] : null,\r\n                        },\r\n                    ]}\r\n                >\r\n                    <Text style={isCorrect ? styles.correctMessage : styles.wrongMessage}>\r\n                        {isCorrect !== null ? (isCorrect ? \"Correct! \" : \"No\") : \"\"}\r\n                    </Text>\r\n                    <Pressable\r\n                        style={[\r\n                            styles.AnswerBox,\r\n                            selectedOption === option && (isCorrect ? styles.correctBox : styles.wrongBox),\r\n                        ]}\r\n                        onPress={() => handlePressedOption(option)}\r\n                        disabled={selectedOption}\r\n                        key={option}\r\n                    >\r\n                        <Text style={styles.answerText}>{option}</Text>\r\n                    </Pressable>\r\n                </Animated.View>\r\n            ))}\r\n\r\n            <Text style={styles.customMessage}>{customMessage}</Text>\r\n\r\n            <Button\r\n                color=\"black\"\r\n                mode=\"contained\"\r\n                onPress={handleNext}\r\n                disabled={!selectedOption} \r\n                style={!selectedOption ? styles.disabledButton : null} \r\n                labelStyle={!selectedOption ? styles.disabledButtonText : null} \r\n            >\r\n                Continue\r\n            </Button>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n\r\nconst styles = StyleSheet.create({\r\n    AnswerBox: {\r\n        width: 361,\r\n        height: 214,\r\n        borderWidth: 3,\r\n        borderRadius: 6,\r\n        borderColor: 'rgba(0, 0, 0, 0.05)',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n        alignItems: 'center',\r\n        justifyContent: 'center', \r\n    },\r\n\r\n    answerText: {\r\n        textAlign: 'center',\r\n        fontSize: 24,\r\n    },\r\n    question: {\r\n        marginBottom: 10,\r\n        fontSize: 18,\r\n    },\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    correctBox: {\r\n        borderColor: 'rgba(19, 212, 2, 1)',\r\n    },\r\n    wrongBox: {\r\n        borderColor: 'rgba(241, 58, 0, 1)',\r\n    },\r\n    progressBarContainer: {\r\n        width: '100%',\r\n        height: 20,\r\n        marginBottom: 30,\r\n    },\r\n\r\n    correctMessage: {\r\n        color: 'rgba(98, 218, 103, 1)',\r\n        fontSize: 24,\r\n        textAlign: 'center',\r\n        marginBottom: 30,\r\n    },\r\n    wrongMessage: {\r\n        color: 'rgba(255, 72, 15, 1)',\r\n        fontSize: 24,\r\n        textAlign: 'center',\r\n        marginBottom: 20,\r\n    },\r\n    customMessage: {\r\n        color: 'black',\r\n        fontSize: 16,\r\n        position: 'absolute',\r\n        top: 390, \r\n        width: '100%',\r\n        textAlign: 'left', \r\n\r\n    },\r\n    disabledButton: {\r\n        backgroundColor: 'black',\r\n    },\r\n    disabledButtonText: {\r\n        color: 'white', \r\n    },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}