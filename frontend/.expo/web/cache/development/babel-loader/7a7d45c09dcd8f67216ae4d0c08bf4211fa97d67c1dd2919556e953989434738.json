{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport color from 'color';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { withTheme } from \"../../../core/theming\";\nimport { AdornmentSide } from \"./enums\";\nvar AFFIX_OFFSET = 12;\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }\n  }, affix);\n};\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    theme = _ref2.theme;\n  var _React$useContext = React.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier;\n  var textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix);\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\Adornment\\TextInputAffix.tsx"],"names":["React","color","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}