{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar Button = function Button(_ref) {\n  var _borderRadius, _StyleSheet$flatten;\n  var disabled = _ref.disabled,\n    compact = _ref.compact,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n    dark = _ref.dark,\n    loading = _ref.loading,\n    icon = _ref.icon,\n    buttonColor = _ref.color,\n    children = _ref.children,\n    _ref$uppercase = _ref.uppercase,\n    uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n    accessibilityLabel = _ref.accessibilityLabel,\n    accessibilityHint = _ref.accessibilityHint,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    style = _ref.style,\n    theme = _ref.theme,\n    contentStyle = _ref.contentStyle,\n    labelStyle = _ref.labelStyle,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)),\n    elevation = _React$useRef.current;\n  React.useEffect(function () {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n      }).start();\n    }\n  };\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: Platform.OS === 'web' || Platform.constants.reactNativeVersion.minor <= 72\n      }).start();\n    }\n  };\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (_borderRadius = (StyleSheet.flatten(style) || {}).borderRadius) !== null && _borderRadius !== void 0 ? _borderRadius : roundness : roundness\n  };\n  var _ref2 = StyleSheet.flatten(labelStyle) || {},\n    customLabelColor = _ref2.color,\n    customLabelSize = _ref2.fontSize;\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n  var iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevation\n    }, buttonStyle, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"sources":["D:\\Community Dreams frontend\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\Button.tsx"],"names":["React","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Animated","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","Platform","OS","constants","reactNativeVersion","minor","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  Platform,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver:\n          Platform.OS === 'web' ||\n          Platform.constants.reactNativeVersion.minor <= 72,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ??\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}