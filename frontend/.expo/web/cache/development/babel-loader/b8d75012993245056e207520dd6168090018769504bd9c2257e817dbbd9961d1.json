{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { defineHidden } from \"@react-spring/shared\";\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = function isAnimated(value) {\n  return !!value && value[$node] === value;\n};\nvar getAnimated = function getAnimated(owner) {\n  return owner && owner[$node];\n};\nvar setAnimated = function setAnimated(owner, node) {\n  return defineHidden(owner, $node, node);\n};\nvar getPayload = function getPayload(owner) {\n  return owner && owner[$node] && owner[$node].getPayload();\n};\nvar Animated = function () {\n  function Animated() {\n    _classCallCheck(this, Animated);\n    setAnimated(this, this);\n  }\n  return _createClass(Animated, [{\n    key: \"getPayload\",\n    value: function getPayload() {\n      return this.payload || [];\n    }\n  }]);\n}();\nimport { is } from \"@react-spring/shared\";\nvar AnimatedValue = function (_Animated) {\n  function AnimatedValue(_value) {\n    var _this;\n    _classCallCheck(this, AnimatedValue);\n    _this = _callSuper(this, AnimatedValue);\n    _this._value = _value;\n    _this.done = true;\n    _this.durationProgress = 0;\n    if (is.num(_this._value)) {\n      _this.lastPosition = _this._value;\n    }\n    return _this;\n  }\n  _inherits(AnimatedValue, _Animated);\n  return _createClass(AnimatedValue, [{\n    key: \"getPayload\",\n    value: function getPayload() {\n      return [this];\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this._value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, step) {\n      if (is.num(value)) {\n        this.lastPosition = value;\n        if (step) {\n          value = Math.round(value / step) * step;\n          if (this.done) {\n            this.lastPosition = value;\n          }\n        }\n      }\n      if (this._value === value) {\n        return false;\n      }\n      this._value = value;\n      return true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var done = this.done;\n      this.done = false;\n      if (is.num(this._value)) {\n        this.elapsedTime = 0;\n        this.durationProgress = 0;\n        this.lastPosition = this._value;\n        if (done) this.lastVelocity = null;\n        this.v0 = null;\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      return new AnimatedValue(value);\n    }\n  }]);\n}(Animated);\nimport { is as is2, createInterpolator } from \"@react-spring/shared\";\nvar AnimatedString = function (_AnimatedValue) {\n  function AnimatedString(value) {\n    var _this2;\n    _classCallCheck(this, AnimatedString);\n    _this2 = _callSuper(this, AnimatedString, [0]);\n    _this2._string = null;\n    _this2._toString = createInterpolator({\n      output: [value, value]\n    });\n    return _this2;\n  }\n  _inherits(AnimatedString, _AnimatedValue);\n  return _createClass(AnimatedString, [{\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this._string;\n      return value == null ? this._string = this._toString(this._value) : value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (is2.str(value)) {\n        if (value == this._string) {\n          return false;\n        }\n        this._string = value;\n        this._value = 1;\n      } else if (_get(_getPrototypeOf(AnimatedString.prototype), \"setValue\", this).call(this, value)) {\n        this._string = null;\n      } else {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(goal) {\n      if (goal) {\n        this._toString = createInterpolator({\n          output: [this.getValue(), goal]\n        });\n      }\n      this._value = 0;\n      _get(_getPrototypeOf(AnimatedString.prototype), \"reset\", this).call(this);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      return new AnimatedString(value);\n    }\n  }]);\n}(AnimatedValue);\nimport { isAnimatedString } from \"@react-spring/shared\";\nimport { each, eachProp, getFluidValue, hasFluidValue } from \"@react-spring/shared\";\nvar TreeContext = {\n  dependencies: null\n};\nvar AnimatedObject = function (_Animated2) {\n  function AnimatedObject(source) {\n    var _this3;\n    _classCallCheck(this, AnimatedObject);\n    _this3 = _callSuper(this, AnimatedObject);\n    _this3.source = source;\n    _this3.setValue(source);\n    return _this3;\n  }\n  _inherits(AnimatedObject, _Animated2);\n  return _createClass(AnimatedObject, [{\n    key: \"getValue\",\n    value: function getValue(animated) {\n      var values = {};\n      eachProp(this.source, function (source, key) {\n        if (isAnimated(source)) {\n          values[key] = source.getValue(animated);\n        } else if (hasFluidValue(source)) {\n          values[key] = getFluidValue(source);\n        } else if (!animated) {\n          values[key] = source;\n        }\n      });\n      return values;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(source) {\n      this.source = source;\n      this.payload = this._makePayload(source);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.payload) {\n        each(this.payload, function (node) {\n          return node.reset();\n        });\n      }\n    }\n  }, {\n    key: \"_makePayload\",\n    value: function _makePayload(source) {\n      if (source) {\n        var payload = new Set();\n        eachProp(source, this._addToPayload, payload);\n        return Array.from(payload);\n      }\n    }\n  }, {\n    key: \"_addToPayload\",\n    value: function _addToPayload(source) {\n      var _this4 = this;\n      if (TreeContext.dependencies && hasFluidValue(source)) {\n        TreeContext.dependencies.add(source);\n      }\n      var payload = getPayload(source);\n      if (payload) {\n        each(payload, function (node) {\n          return _this4.add(node);\n        });\n      }\n    }\n  }]);\n}(Animated);\nvar AnimatedArray = function (_AnimatedObject) {\n  function AnimatedArray(source) {\n    _classCallCheck(this, AnimatedArray);\n    return _callSuper(this, AnimatedArray, [source]);\n  }\n  _inherits(AnimatedArray, _AnimatedObject);\n  return _createClass(AnimatedArray, [{\n    key: \"getValue\",\n    value: function getValue() {\n      return this.source.map(function (node) {\n        return node.getValue();\n      });\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(source) {\n      var payload = this.getPayload();\n      if (source.length == payload.length) {\n        return payload.map(function (node, i) {\n          return node.setValue(source[i]);\n        }).some(Boolean);\n      }\n      _get(_getPrototypeOf(AnimatedArray.prototype), \"setValue\", this).call(this, source.map(makeAnimated));\n      return true;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(source) {\n      return new AnimatedArray(source);\n    }\n  }]);\n}(AnimatedObject);\nfunction makeAnimated(value) {\n  var nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;\n  return nodeType.create(value);\n}\nimport { is as is3, isAnimatedString as isAnimatedString2 } from \"@react-spring/shared\";\nfunction getAnimatedType(value) {\n  var parentNode = getAnimated(value);\n  return parentNode ? parentNode.constructor : is3.arr(value) ? AnimatedArray : isAnimatedString2(value) ? AnimatedString : AnimatedValue;\n}\nimport { is as is5, eachProp as eachProp2 } from \"@react-spring/shared\";\nimport * as React from \"react\";\nimport { forwardRef, useRef, useCallback, useEffect } from \"react\";\nimport { is as is4, each as each2, raf, useForceUpdate, useOnce, addFluidObserver, removeFluidObserver, useIsomorphicLayoutEffect } from \"@react-spring/shared\";\nvar withAnimated = function withAnimated(Component, host) {\n  var hasInstance = !is4.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n  return forwardRef(function (givenProps, givenRef) {\n    var instanceRef = useRef(null);\n    var ref = hasInstance && useCallback(function (value) {\n      instanceRef.current = updateRef(givenRef, value);\n    }, [givenRef]);\n    var _getAnimatedState = getAnimatedState(givenProps, host),\n      _getAnimatedState2 = _slicedToArray(_getAnimatedState, 2),\n      props = _getAnimatedState2[0],\n      deps = _getAnimatedState2[1];\n    var forceUpdate = useForceUpdate();\n    var callback = function callback() {\n      var instance = instanceRef.current;\n      if (hasInstance && !instance) {\n        return;\n      }\n      var didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    };\n    var observer = new PropsObserver(callback, deps);\n    var observerRef = useRef();\n    useIsomorphicLayoutEffect(function () {\n      observerRef.current = observer;\n      each2(deps, function (dep) {\n        return addFluidObserver(dep, observer);\n      });\n      return function () {\n        if (observerRef.current) {\n          each2(observerRef.current.deps, function (dep) {\n            return removeFluidObserver(dep, observerRef.current);\n          });\n          raf.cancel(observerRef.current.update);\n        }\n      };\n    });\n    useEffect(callback, []);\n    useOnce(function () {\n      return function () {\n        var observer2 = observerRef.current;\n        each2(observer2.deps, function (dep) {\n          return removeFluidObserver(dep, observer2);\n        });\n      };\n    });\n    var usedProps = host.getComponentProps(props.getValue());\n    return React.createElement(Component, _objectSpread(_objectSpread({}, usedProps), {}, {\n      ref: ref\n    }));\n  });\n};\nvar PropsObserver = function () {\n  function PropsObserver(update, deps) {\n    _classCallCheck(this, PropsObserver);\n    this.update = update;\n    this.deps = deps;\n  }\n  return _createClass(PropsObserver, [{\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        raf.write(this.update);\n      }\n    }\n  }]);\n}();\nfunction getAnimatedState(props, host) {\n  var dependencies = new Set();\n  TreeContext.dependencies = dependencies;\n  if (props.style) props = _objectSpread(_objectSpread({}, props), {}, {\n    style: host.createAnimatedStyle(props.style)\n  });\n  props = new AnimatedObject(props);\n  TreeContext.dependencies = null;\n  return [props, dependencies];\n}\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is4.fun(ref)) ref(value);else ref.current = value;\n  }\n  return value;\n}\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = function createHost(components) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$applyAnimatedVal = _ref.applyAnimatedValues,\n    applyAnimatedValues = _ref$applyAnimatedVal === void 0 ? function () {\n      return false;\n    } : _ref$applyAnimatedVal,\n    _ref$createAnimatedSt = _ref.createAnimatedStyle,\n    createAnimatedStyle = _ref$createAnimatedSt === void 0 ? function (style) {\n      return new AnimatedObject(style);\n    } : _ref$createAnimatedSt,\n    _ref$getComponentProp = _ref.getComponentProps,\n    getComponentProps = _ref$getComponentProp === void 0 ? function (props) {\n      return props;\n    } : _ref$getComponentProp;\n  var hostConfig = {\n    applyAnimatedValues: applyAnimatedValues,\n    createAnimatedStyle: createAnimatedStyle,\n    getComponentProps: getComponentProps\n  };\n  var animated = function animated(Component) {\n    var displayName = getDisplayName(Component) || \"Anonymous\";\n    if (is5.str(Component)) {\n      Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n    Component.displayName = \"Animated(\" + displayName + \")\";\n    return Component;\n  };\n  eachProp2(components, function (Component, key) {\n    if (is5.arr(components)) {\n      key = getDisplayName(Component);\n    }\n    animated[key] = animated(Component);\n  });\n  return {\n    animated: animated\n  };\n};\nvar getDisplayName = function getDisplayName(arg) {\n  return is5.str(arg) ? arg : arg && is5.str(arg.displayName) ? arg.displayName : is5.fun(arg) && arg.name || null;\n};\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedString, AnimatedValue, createHost, getAnimated, getAnimatedType, getPayload, isAnimated, setAnimated };","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/Animated.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/AnimatedValue.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/AnimatedString.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/AnimatedArray.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/AnimatedObject.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/context.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/getAnimatedType.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/createHost.ts","/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-spring/animated/src/withAnimated.tsx"],"names":["is","isAnimatedString","observer"],"mappings":"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","sourcesContent":["import { defineHidden } from '@react-spring/shared'\nimport { AnimatedValue } from './AnimatedValue'\n\nconst $node: any = Symbol.for('Animated:node')\n\nexport const isAnimated = <T = any>(value: any): value is Animated<T> =>\n  !!value && value[$node] === value\n\n/** Get the owner's `Animated` node. */\nexport const getAnimated = <T = any>(owner: any): Animated<T> | undefined =>\n  owner && owner[$node]\n\n/** Set the owner's `Animated` node. */\nexport const setAnimated = (owner: any, node: Animated) =>\n  defineHidden(owner, $node, node)\n\n/** Get every `AnimatedValue` in the owner's `Animated` node. */\nexport const getPayload = (owner: any): AnimatedValue[] | undefined =>\n  owner && owner[$node] && owner[$node].getPayload()\n\nexport abstract class Animated<T = any> {\n  /** The cache of animated values */\n  protected payload?: Payload\n\n  constructor() {\n    // This makes \"isAnimated\" return true.\n    setAnimated(this, this)\n  }\n\n  /** Get the current value. Pass `true` for only animated values. */\n  abstract getValue(animated?: boolean): T\n\n  /** Set the current value. Returns `true` if the value changed. */\n  abstract setValue(value: T): boolean | void\n\n  /** Reset any animation state. */\n  abstract reset(goal?: T): void\n\n  /** Get every `AnimatedValue` used by this node. */\n  getPayload(): Payload {\n    return this.payload || []\n  }\n}\n\nexport type Payload = readonly AnimatedValue[]\n","import { is } from '@react-spring/shared'\nimport { Animated, Payload } from './Animated'\n\n/** An animated number or a native attribute value */\nexport class AnimatedValue<T = any> extends Animated {\n  done = true\n  elapsedTime!: number\n  lastPosition!: number\n  lastVelocity?: number | null\n  v0?: number | null\n  durationProgress = 0\n\n  constructor(protected _value: T) {\n    super()\n    if (is.num(this._value)) {\n      this.lastPosition = this._value\n    }\n  }\n\n  /** @internal */\n  static create(value: any) {\n    return new AnimatedValue(value)\n  }\n\n  getPayload(): Payload {\n    return [this]\n  }\n\n  getValue() {\n    return this._value\n  }\n\n  setValue(value: T, step?: number) {\n    if (is.num(value)) {\n      this.lastPosition = value\n      if (step) {\n        value = (Math.round(value / step) * step) as any\n        if (this.done) {\n          this.lastPosition = value as any\n        }\n      }\n    }\n    if (this._value === value) {\n      return false\n    }\n    this._value = value\n    return true\n  }\n\n  reset() {\n    const { done } = this\n    this.done = false\n    if (is.num(this._value)) {\n      this.elapsedTime = 0\n      this.durationProgress = 0\n      this.lastPosition = this._value\n      if (done) this.lastVelocity = null\n      this.v0 = null\n    }\n  }\n}\n","import { AnimatedValue } from './AnimatedValue'\nimport { is, createInterpolator } from '@react-spring/shared'\n\ntype Value = string | number\n\nexport class AnimatedString extends AnimatedValue<Value> {\n  protected declare _value: number\n  protected _string: string | null = null\n  protected _toString: (input: number) => string\n\n  constructor(value: string) {\n    super(0)\n    this._toString = createInterpolator({\n      output: [value, value],\n    })\n  }\n\n  /** @internal */\n  static create(value: string) {\n    return new AnimatedString(value)\n  }\n\n  getValue() {\n    const value = this._string\n    return value == null ? (this._string = this._toString(this._value)) : value\n  }\n\n  setValue(value: Value) {\n    if (is.str(value)) {\n      if (value == this._string) {\n        return false\n      }\n      this._string = value\n      this._value = 1\n    } else if (super.setValue(value)) {\n      this._string = null\n    } else {\n      return false\n    }\n    return true\n  }\n\n  reset(goal?: string) {\n    if (goal) {\n      this._toString = createInterpolator({\n        output: [this.getValue(), goal],\n      })\n    }\n    this._value = 0\n    super.reset()\n  }\n}\n","import { isAnimatedString } from '@react-spring/shared'\nimport { AnimatedObject } from './AnimatedObject'\nimport { AnimatedString } from './AnimatedString'\nimport { AnimatedValue } from './AnimatedValue'\n\ntype Value = number | string\ntype Source = AnimatedValue<Value>[]\n\n/** An array of animated nodes */\nexport class AnimatedArray<\n  T extends ReadonlyArray<Value> = Value[]\n> extends AnimatedObject {\n  protected declare source: Source\n  constructor(source: T) {\n    super(source)\n  }\n\n  /** @internal */\n  static create<T extends ReadonlyArray<Value>>(source: T) {\n    return new AnimatedArray(source)\n  }\n\n  getValue(): T {\n    return this.source.map(node => node.getValue()) as any\n  }\n\n  setValue(source: T) {\n    const payload = this.getPayload()\n    // Reuse the payload when lengths are equal.\n    if (source.length == payload.length) {\n      return payload.map((node, i) => node.setValue(source[i])).some(Boolean)\n    }\n    // Remake the payload when length changes.\n    super.setValue(source.map(makeAnimated))\n    return true\n  }\n}\n\nfunction makeAnimated(value: any) {\n  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue\n  return nodeType.create(value)\n}\n","import { Lookup } from '@react-spring/types'\nimport {\n  each,\n  eachProp,\n  getFluidValue,\n  hasFluidValue,\n} from '@react-spring/shared'\nimport { Animated, isAnimated, getPayload } from './Animated'\nimport { AnimatedValue } from './AnimatedValue'\nimport { TreeContext } from './context'\n\n/** An object containing `Animated` nodes */\nexport class AnimatedObject extends Animated {\n  constructor(protected source: Lookup) {\n    super()\n    this.setValue(source)\n  }\n\n  getValue(animated?: boolean) {\n    const values: Lookup = {}\n    eachProp(this.source, (source, key) => {\n      if (isAnimated(source)) {\n        values[key] = source.getValue(animated)\n      } else if (hasFluidValue(source)) {\n        values[key] = getFluidValue(source)\n      } else if (!animated) {\n        values[key] = source\n      }\n    })\n    return values\n  }\n\n  /** Replace the raw object data */\n  setValue(source: Lookup) {\n    this.source = source\n    this.payload = this._makePayload(source)\n  }\n\n  reset() {\n    if (this.payload) {\n      each(this.payload, node => node.reset())\n    }\n  }\n\n  /** Create a payload set. */\n  protected _makePayload(source: Lookup) {\n    if (source) {\n      const payload = new Set<AnimatedValue>()\n      eachProp(source, this._addToPayload, payload)\n      return Array.from(payload)\n    }\n  }\n\n  /** Add to a payload set. */\n  protected _addToPayload(this: Set<AnimatedValue>, source: any) {\n    if (TreeContext.dependencies && hasFluidValue(source)) {\n      TreeContext.dependencies.add(source)\n    }\n    const payload = getPayload(source)\n    if (payload) {\n      each(payload, node => this.add(node))\n    }\n  }\n}\n","import { FluidValue } from '@react-spring/shared'\n\nexport type TreeContext = {\n  /**\n   * Any animated values found when updating the payload of an `AnimatedObject`\n   * are also added to this `Set` to be observed by an animated component.\n   */\n  dependencies: Set<FluidValue> | null\n}\n\nexport const TreeContext: TreeContext = { dependencies: null }\n","import { is, isAnimatedString } from '@react-spring/shared'\nimport { AnimatedType } from './types'\nimport { AnimatedArray } from './AnimatedArray'\nimport { AnimatedString } from './AnimatedString'\nimport { AnimatedValue } from './AnimatedValue'\nimport { getAnimated } from './Animated'\n\n/** Return the `Animated` node constructor for a given value */\nexport function getAnimatedType(value: any): AnimatedType {\n  const parentNode = getAnimated(value)\n  return parentNode\n    ? (parentNode.constructor as any)\n    : is.arr(value)\n    ? AnimatedArray\n    : isAnimatedString(value)\n    ? AnimatedString\n    : AnimatedValue\n}\n","import { Lookup } from '@react-spring/types'\nimport { is, eachProp } from '@react-spring/shared'\nimport { AnimatableComponent, withAnimated } from './withAnimated'\nimport { Animated } from './Animated'\nimport { AnimatedObject } from './AnimatedObject'\n\nexport interface HostConfig {\n  /** Provide custom logic for native updates */\n  applyAnimatedValues: (node: any, props: Lookup) => boolean | void\n  /** Wrap the `style` prop with an animated node */\n  createAnimatedStyle: (style: Lookup) => Animated\n  /** Intercept props before they're passed to an animated component */\n  getComponentProps: (props: Lookup) => typeof props\n}\n\n// A stub type that gets replaced by @react-spring/web and others.\ntype WithAnimated = {\n  (Component: AnimatableComponent): any\n  [key: string]: any\n}\n\n// For storing the animated version on the original component\nconst cacheKey = Symbol.for('AnimatedComponent')\n\nexport const createHost = (\n  components: AnimatableComponent[] | { [key: string]: AnimatableComponent },\n  {\n    applyAnimatedValues = () => false,\n    createAnimatedStyle = style => new AnimatedObject(style),\n    getComponentProps = props => props,\n  }: Partial<HostConfig> = {}\n) => {\n  const hostConfig: HostConfig = {\n    applyAnimatedValues,\n    createAnimatedStyle,\n    getComponentProps,\n  }\n\n  const animated: WithAnimated = (Component: any) => {\n    const displayName = getDisplayName(Component) || 'Anonymous'\n\n    if (is.str(Component)) {\n      Component =\n        animated[Component] ||\n        (animated[Component] = withAnimated(Component, hostConfig))\n    } else {\n      Component =\n        Component[cacheKey] ||\n        (Component[cacheKey] = withAnimated(Component, hostConfig))\n    }\n\n    Component.displayName = `Animated(${displayName})`\n    return Component\n  }\n\n  eachProp(components, (Component, key) => {\n    if (is.arr(components)) {\n      key = getDisplayName(Component)!\n    }\n    animated[key] = animated(Component)\n  })\n\n  return {\n    animated,\n  }\n}\n\nconst getDisplayName = (arg: AnimatableComponent) =>\n  is.str(arg)\n    ? arg\n    : arg && is.str(arg.displayName)\n    ? arg.displayName\n    : (is.fun(arg) && arg.name) || null\n","import * as React from 'react'\nimport { forwardRef, useRef, Ref, useCallback, useEffect } from 'react'\nimport {\n  is,\n  each,\n  raf,\n  useForceUpdate,\n  useOnce,\n  FluidEvent,\n  FluidValue,\n  addFluidObserver,\n  removeFluidObserver,\n  useIsomorphicLayoutEffect,\n} from '@react-spring/shared'\nimport { ElementType } from '@react-spring/types'\n\nimport { AnimatedObject } from './AnimatedObject'\nimport { TreeContext } from './context'\nimport { HostConfig } from './createHost'\n\nexport type AnimatableComponent = string | Exclude<ElementType, string>\n\nexport const withAnimated = (Component: any, host: HostConfig) => {\n  const hasInstance: boolean =\n    // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !is.fun(Component) ||\n    (Component.prototype && Component.prototype.isReactComponent)\n\n  return forwardRef((givenProps: any, givenRef: Ref<any>) => {\n    const instanceRef = useRef<any>(null)\n\n    // The `hasInstance` value is constant, so we can safely avoid\n    // the `useCallback` invocation when `hasInstance` is false.\n    const ref =\n      hasInstance &&\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCallback(\n        (value: any) => {\n          instanceRef.current = updateRef(givenRef, value)\n        },\n        [givenRef]\n      )\n\n    const [props, deps] = getAnimatedState(givenProps, host)\n\n    const forceUpdate = useForceUpdate()\n\n    const callback = () => {\n      const instance = instanceRef.current\n      if (hasInstance && !instance) {\n        // Either this component was unmounted before changes could be\n        // applied, or the wrapped component forgot to forward its ref.\n        return\n      }\n\n      const didUpdate = instance\n        ? host.applyAnimatedValues(instance, props.getValue(true))\n        : false\n\n      // Re-render the component when native updates fail.\n      if (didUpdate === false) {\n        forceUpdate()\n      }\n    }\n\n    const observer = new PropsObserver(callback, deps)\n\n    const observerRef = useRef<PropsObserver>()\n    useIsomorphicLayoutEffect(() => {\n      observerRef.current = observer\n\n      // Observe the latest dependencies.\n      each(deps, dep => addFluidObserver(dep, observer))\n\n      return () => {\n        // Stop observing previous dependencies.\n        if (observerRef.current) {\n          each(observerRef.current.deps, dep =>\n            removeFluidObserver(dep, observerRef.current!)\n          )\n          raf.cancel(observerRef.current.update)\n        }\n      }\n    })\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(callback, [])\n    // Stop observing on unmount.\n    useOnce(() => () => {\n      const observer = observerRef.current!\n      each(observer.deps, dep => removeFluidObserver(dep, observer))\n    })\n\n    const usedProps = host.getComponentProps(props.getValue())\n    return <Component {...usedProps} ref={ref} />\n  })\n}\n\nclass PropsObserver {\n  constructor(readonly update: () => void, readonly deps: Set<FluidValue>) {}\n  eventObserved(event: FluidEvent) {\n    if (event.type == 'change') {\n      raf.write(this.update)\n    }\n  }\n}\n\ntype AnimatedState = [props: AnimatedObject, dependencies: Set<FluidValue>]\n\nfunction getAnimatedState(props: any, host: HostConfig): AnimatedState {\n  const dependencies = new Set<FluidValue>()\n  TreeContext.dependencies = dependencies\n\n  // Search the style for dependencies.\n  if (props.style)\n    props = {\n      ...props,\n      style: host.createAnimatedStyle(props.style),\n    }\n\n  // Search the props for dependencies.\n  props = new AnimatedObject(props)\n\n  TreeContext.dependencies = null\n  return [props, dependencies]\n}\n\nfunction updateRef<T>(ref: Ref<T>, value: T) {\n  if (ref) {\n    if (is.fun(ref)) ref(value)\n    else (ref as any).current = value\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}