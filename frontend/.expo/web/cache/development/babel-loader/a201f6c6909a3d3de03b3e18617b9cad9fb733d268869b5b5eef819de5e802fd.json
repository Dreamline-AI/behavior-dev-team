{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport FontObserver from 'fontfaceobserver';\nimport { FontDisplay } from \"./Font.types\";\nfunction getFontFaceStyleSheet() {\n  if (!canUseDOM) {\n    return null;\n  }\n  var styleSheet = getStyleElement();\n  return styleSheet.sheet ? styleSheet.sheet : null;\n}\nfunction getFontFaceRules() {\n  var sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    var rules = _toConsumableArray(sheet.cssRules);\n    var items = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({\n          rule: rule,\n          index: i\n        });\n      }\n    }\n    return items;\n  }\n  return [];\n}\nfunction getFontFaceRulesMatchingResource(fontFamilyName, options) {\n  var rules = getFontFaceRules();\n  return rules.filter(function (_ref) {\n    var rule = _ref.rule;\n    return rule.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule.style.fontDisplay : true);\n  });\n}\nexport default {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n  unloadAllAsync: function unloadAllAsync() {\n    var element;\n    return _regeneratorRuntime.async(function unloadAllAsync$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (canUseDOM) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 2:\n          element = document.getElementById(ID);\n          if (element && element instanceof HTMLStyleElement) {\n            document.removeChild(element);\n          }\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  },\n  unloadAsync: function unloadAsync(fontFamilyName, options) {\n    var sheet, items, _iterator, _step, item;\n    return _regeneratorRuntime.async(function unloadAsync$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          sheet = getFontFaceStyleSheet();\n          if (sheet) {\n            _context2.next = 3;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 3:\n          items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n          for (_iterator = _createForOfIteratorHelperLoose(items); !(_step = _iterator()).done;) {\n            item = _step.value;\n            sheet.deleteRule(item.index);\n          }\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  },\n  loadAsync: function loadAsync(fontFamilyName, resource) {\n    var canInjectStyle, style;\n    return _regeneratorRuntime.async(function loadAsync$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (canUseDOM) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 2:\n          canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n          if (canInjectStyle) {\n            _context3.next = 5;\n            break;\n          }\n          throw new CodedError('ERR_WEB_ENVIRONMENT', \"The browser's `document.head` element doesn't support injecting fonts.\");\n        case 5:\n          style = _createWebStyle(fontFamilyName, resource);\n          document.head.appendChild(style);\n          if (isFontLoadingListenerSupported()) {\n            _context3.next = 9;\n            break;\n          }\n          return _context3.abrupt(\"return\");\n        case 9:\n          return _context3.abrupt(\"return\", new FontObserver(fontFamilyName, {\n            display: resource.display\n          }).load());\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, null, null, null, Promise);\n  }\n};\nvar ID = 'expo-generated-fonts';\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \" + fontFamily + \";\\n    src: url(\" + resource.uri + \");\\n    font-display: \" + (resource.display || FontDisplay.AUTO) + \";\\n  }\";\n  var styleElement = getStyleElement();\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\nfunction isFontLoadingListenerSupported() {\n  var userAgent = window.navigator.userAgent;\n  var isIOS = !!userAgent.match(/iPad|iPhone/i);\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isEdge = userAgent.includes('Edge');\n  var isIE = userAgent.includes('Trident');\n  var isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}","map":{"version":3,"sources":["D:\\Community Dreams frontend\\frontend\\node_modules\\expo-font\\src\\ExpoFontLoader.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport FontObserver from 'fontfaceobserver';\n\nimport { UnloadFontOptions } from './Font';\nimport { FontDisplay, FontResource } from './Font.types';\n\nfunction getFontFaceStyleSheet(): CSSStyleSheet | null {\n  if (!canUseDOM) {\n    return null;\n  }\n  const styleSheet = getStyleElement();\n  return styleSheet.sheet ? (styleSheet.sheet as CSSStyleSheet) : null;\n}\n\ntype RuleItem = { rule: CSSFontFaceRule; index: number };\n\nfunction getFontFaceRules(): RuleItem[] {\n  const sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    // @ts-ignore: rule iterator\n    const rules = [...sheet.cssRules];\n\n    const items: RuleItem[] = [];\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({ rule, index: i });\n      }\n    }\n    return items;\n  }\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(\n  fontFamilyName: string,\n  options?: UnloadFontOptions\n): RuleItem[] {\n  const rules = getFontFaceRules();\n  return rules.filter(({ rule }) => {\n    return (\n      rule.style.fontFamily === fontFamilyName &&\n      (options && options.display ? options.display === (rule.style as any).fontDisplay : true)\n    );\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async unloadAllAsync(): Promise<void> {\n    if (!canUseDOM) return;\n\n    const element = document.getElementById(ID);\n    if (element && element instanceof HTMLStyleElement) {\n      document.removeChild(element);\n    }\n  },\n\n  async unloadAsync(fontFamilyName: string, options?: UnloadFontOptions): Promise<void> {\n    const sheet = getFontFaceStyleSheet();\n    if (!sheet) return;\n    const items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n    for (const item of items) {\n      sheet.deleteRule(item.index);\n    }\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!canUseDOM) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError(\n        'ERR_WEB_ENVIRONMENT',\n        `The browser's \\`document.head\\` element doesn't support injecting fonts.`\n      );\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n\n    if (!isFontLoadingListenerSupported()) {\n      return;\n    }\n\n    return new FontObserver(fontFamilyName, { display: resource.display }).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n    font-display: ${resource.display || FontDisplay.AUTO};\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported(): boolean {\n  const { userAgent } = window.navigator;\n  // WebKit is broken https://github.com/bramstein/fontfaceobserver/issues/95\n  const isIOS = !!userAgent.match(/iPad|iPhone/i);\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  // Edge is broken https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n  const isEdge = userAgent.includes('Edge');\n  // Internet Explorer\n  const isIE = userAgent.includes('Trident');\n  // Firefox\n  const isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}