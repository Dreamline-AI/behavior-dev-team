{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport color from 'color';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { withTheme } from \"../../../core/theming\";\nimport { AdornmentSide } from \"./enums\";\nvar AFFIX_OFFSET = 12;\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }\n  }, affix);\n};\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    theme = _ref2.theme;\n  var _React$useContext = React.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier;\n  var textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix);\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"names":["React","color","Text","StyleSheet","Animated","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","createElement","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","_React$useContext","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","_defineProperty","top","View","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"sources":["C:\\volunteer\\frontend\\node_modules\\react-native-paper\\lib\\module\\components\\TextInput\\Adornment\\TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}