{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nvar getActiveRoute = function getActiveRoute(state) {\n  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n    _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n    legacy = _checkLegacyPathConfi2[0],\n    compatOptions = _checkLegacyPathConfi2[1];\n  var configs = compatOptions ? createNormalizedConfigs(legacy, compatOptions.screens) : {};\n  var path = '/';\n  var current = state;\n  var allParams = {};\n  var _loop = function _loop() {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      var nestedRouteNames = [];\n      var hasNext = true;\n      var _loop2 = function _loop2() {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n          var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n            return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n          }));\n          if (pattern) {\n            _extends(allParams, currentParams);\n          }\n          if (focusedRoute === route) {\n            focusedParams = _objectSpread({}, currentParams);\n            (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(function (p) {\n              return p.startsWith(':');\n            }).forEach(function (p) {\n              var name = getParamName(p);\n              if (focusedParams) {\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          hasNext = false;\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            hasNext = false;\n          }\n        }\n      };\n      while (route.name in currentOptions && hasNext) {\n        _loop2();\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        path += pattern.split('/').map(function (p) {\n          var name = getParamName(p);\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\");\n            }\n            return route.name;\n          }\n          if (p.startsWith(':')) {\n            var value = allParams[name];\n            if (value === undefined && p.endsWith('?')) {\n              return '';\n            }\n            return encodeURIComponent(value);\n          }\n          return encodeURIComponent(p);\n        }).join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            delete focusedParams[param];\n          }\n        }\n        var query = queryString.stringify(focusedParams);\n        if (query) {\n          path += \"?\".concat(query);\n        }\n      }\n      current = route.state;\n    },\n    _currentOptions$route,\n    _pattern;\n  while (current) {\n    _loop();\n  }\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\nvar fromEntries = function fromEntries(entries) {\n  return entries.reduce(function (acc, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    if (acc.hasOwnProperty(k)) {\n      throw new Error(\"A value for key '\".concat(k, \"' already exists in the object.\"));\n    }\n    acc[k] = v;\n    return acc;\n  }, {});\n};\nvar getParamName = function getParamName(pattern) {\n  return pattern.replace(/^:/, '').replace(/\\?$/, '');\n};\nvar joinPaths = function joinPaths() {\n  var _ref5;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref5 = []).concat.apply(_ref5, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar createConfigItem = function createConfigItem(legacy, config, parentPattern) {\n  var _pattern2;\n  if (typeof config === 'string') {\n    var _pattern3 = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern: _pattern3\n    };\n  }\n  var pattern;\n  if (legacy) {\n    pattern = config.exact !== true && parentPattern && config.path ? joinPaths(parentPattern, config.path) : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  }\n  var screens = config.screens ? createNormalizedConfigs(legacy, config.screens, pattern) : undefined;\n  return {\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens: screens\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, options, pattern) {\n  return fromEntries(Object.entries(options).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      name = _ref7[0],\n      c = _ref7[1];\n    var result = createConfigItem(legacy, c, pattern);\n    return [name, result];\n  }));\n};","map":{"version":3,"sources":["C:\\Users\\ellen\\OneDrive\\Documents\\backup-folder-1\\CDreams\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\core\\lib\\module\\getPathFromState.tsx"],"names":["queryString","checkLegacyPathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","legacy","compatOptions","configs","createNormalizedConfigs","screens","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","fromEntries","Object","entries","map","key","value","String","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","replace","reduce","acc","k","v","hasOwnProperty","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","c","result"],"mappings":"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","sourcesContent":["import * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfig, PathConfigMap } from './types';\n\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state: State,\n  options?: Options\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = compatOptions\n    ? createNormalizedConfigs(legacy, compatOptions.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\n// Object.fromEntries is not available in older iOS versions\nconst fromEntries = <K extends string, V>(entries: (readonly [K, V])[]) =>\n  entries.reduce((acc, [k, v]) => {\n    if (acc.hasOwnProperty(k)) {\n      throw new Error(`A value for key '${k}' already exists in the object.`);\n    }\n\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  legacy: boolean,\n  config: PathConfig | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (legacy) {\n    pattern =\n      config.exact !== true && parentPattern && config.path\n        ? joinPaths(parentPattern, config.path)\n        : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\n        \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n      );\n    }\n\n    pattern =\n      config.exact !== true\n        ? joinPaths(parentPattern || '', config.path || '')\n        : config.path || '';\n  }\n\n  const screens = config.screens\n    ? createNormalizedConfigs(legacy, config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  options: PathConfigMap,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(legacy, c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}