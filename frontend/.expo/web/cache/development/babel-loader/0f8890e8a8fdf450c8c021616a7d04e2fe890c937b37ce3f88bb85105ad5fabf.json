{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"openByDefault\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n    return it.type === 'drawer';\n  }));\n};\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [].concat(_toConsumableArray(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\nexport default function DrawerRouter(_ref) {\n  var openByDefault = _ref.openByDefault,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var router = TabRouter(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList,\n        routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeGetIdList = _ref3.routeGetIdList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n          return openDrawer(state);\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["C:\\Users\\sunvi\\Documents\\GitHub\\behavior-dev-team\\frontend\\node_modules\\@react-navigation\\routers\\lib\\module\\DrawerRouter.tsx"],"names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","some","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}