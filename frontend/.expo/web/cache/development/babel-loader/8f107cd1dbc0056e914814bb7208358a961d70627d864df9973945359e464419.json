{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n    _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n    legacy = _checkLegacyPathConfi2[0],\n    compatOptions = _checkLegacyPathConfi2[1];\n  var initialRoutes = [];\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: []\n    });\n  }\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n      return {\n        name: name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n    return bWildcardIndex - aWildcardIndex;\n  });\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n    return _extends(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n      _routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (_routes !== undefined) {\n      current = createNestedStateObject(_routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n        _routes2 = _matchAgainstConfigs2.routes,\n        _remainingPath = _matchAgainstConfigs2.remainingPath;\n      remaining = _remainingPath;\n      if (_routes2 === undefined) {\n        var segments = remaining.split('/');\n        _routes2 = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n      var state = createNestedStateObject(_routes2, initialRoutes);\n      if (current) {\n        var _current2;\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n          current = current.routes[current.index || 0].state;\n        }\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n      current = state;\n    }\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n  var _loop = function _loop() {\n      if (!config.regex) {\n        return 0;\n      }\n      var match = remainingPath.match(config.regex);\n      if (match) {\n        var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p, i) {\n          return _extends(acc, _defineProperty({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n        }, {});\n        routes = config.routeNames.map(function (name) {\n          var _config$path;\n          var config = configs.find(function (c) {\n            return c.screen === name;\n          });\n          var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).reduce(function (acc, p) {\n            var value = matchedParams[p];\n            if (value) {\n              var _config$parse;\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            return {\n              name: name,\n              params: params\n            };\n          }\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return 1;\n      }\n    },\n    _config$pattern,\n    _ret;\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n    _ret = _loop();\n    if (_ret === 0) continue;\n    if (_ret === 1) break;\n  }\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentScreens = arguments.length > 5 ? arguments[5] : undefined;\n  var parentPattern = arguments.length > 6 ? arguments[6] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\");\n    }\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  return state;\n};\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n  var current = state;\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3;\n    current = current.routes[current.index || 0].state;\n  }\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["/Users/saeb_97/Desktop/behavior-dev-team/frontend/node_modules/@react-navigation/core/lib/module/getStateFromPath.tsx"],"names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","it","Error","match","find","c","screen","parse","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","segments","shift","state","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","value","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseConfig","query"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}